<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.VerbatimSourceMapper">

  <sql id="SELECT">
    v.id,
    v.dataset_key,
    v.source_id,
    v.source_dataset_key,
    v.issues
  </sql>

  <sql id="COLS">
    id,
    dataset_key,
    <include refid="COLS_COPY"/>
  </sql>

  <sql id="COLS_COPY">
    source_id,
    source_dataset_key,
    issues
  </sql>

  <sql id="PROPS">
    #{id},
    #{datasetKey},
    #{sourceId},
    #{sourceDatasetKey},
    #{issues, typeHandler=life.catalogue.db.type.IssueSetTypeHandler}::ISSUE[]
  </sql>

  <sql id="FROM">
    verbatim_source v
  </sql>

  <resultMap id="verbatimResultMap" type="VerbatimSource" autoMapping="true">
    <result property="issues" column="issues" typeHandler="life.catalogue.db.type.IssueSetTypeHandler"/>
  </resultMap>

  <select id="get" resultMap="verbatimResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </select>

  <select id="getIssues" resultMap="verbatimResultMap">
    SELECT v.issues
    FROM <include refid="FROM"/>
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </select>

  <insert id="create" parameterType="VerbatimSource">
    INSERT INTO verbatim_source (<include refid="COLS"/>)
    VALUES (<include refid="PROPS"/>)
  </insert>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO verbatim_source_${newDatasetKey} (id,dataset_key,<include refid="COLS_COPY"/>)
    SELECT coalesce(<if test="mapIds">m.id2,</if>v.id),#{newDatasetKey},<include refid="COLS_COPY"/>
    FROM verbatim_source_${datasetKey} v
    <if test="mapIds">
      LEFT JOIN idmap_name_usage_${datasetKey} m ON m.id=v.id
    </if>
  </insert>

  <update id="update" parameterType="VerbatimSource">
    UPDATE verbatim_source
    SET issues = #{issues, typeHandler=life.catalogue.db.type.IssueSetTypeHandler}::ISSUE[],
        issues = #{issues, typeHandler=life.catalogue.db.type.IssueSetTypeHandler}::ISSUE[]
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </update>

  <select id="listByTaxon" parameterType="map" resultMap="verbatimResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </select>

  <delete id="deleteByTaxon" parameterType="map">
    DELETE FROM <include refid="FROM"/>
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </delete>

  <select id="processDataset" parameterType="map" resultMap="verbatimResultMap" resultOrdered="true" fetchSize="2500" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE dataset_key = #{datasetKey}
  </select>

  <select id="processSector" parameterType="map" resultMap="verbatimResultMap" resultOrdered="true" fetchSize="2500" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/> JOIN name_usage u ON v.id=u.id AND v.dataset_key=u.dataset_key
    WHERE v.dataset_key = #{key.datasetKey} AND u.sector_key = #{key.id}
  </select>

  <update id="removeSectorKey" parameterType="map">
    <!-- nothing to do, sectorKey is no the usage table! -->
  </update>

  <delete id="delete" parameterType="map">
    DELETE FROM verbatim_source
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </delete>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM verbatim_source
    WHERE dataset_key = #{datasetKey}
  </delete>

  <delete id="deleteBySector" parameterType="map">
    DELETE FROM verbatim_source v
    USING name_usage u
    WHERE v.dataset_key = #{key.datasetKey} AND u.dataset_key = #{key.datasetKey} AND u.id=v.id AND u.sector_key=#{key.id}
  </delete>

  <delete id="deleteByTemp" parameterType="map">
    DELETE FROM verbatim_source
    USING _tmp_nu tmp
    WHERE dataset_key=#{datasetKey} AND id = tmp.uid
  </delete>

</mapper>
