<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.NameUsageMapper">


  <sql id="usageCols">
    ${alias}.id AS ${prefix}id,
    ${alias}.dataset_key AS ${prefix}dataset_key,
    ${alias}.sector_key AS ${prefix}sector_key,
    ${alias}.verbatim_key AS ${prefix}verbatim_key,
    ${alias}.status AS ${prefix}status,
    ${alias}.origin AS ${prefix}origin,
    ${alias}.parent_id AS ${prefix}parent_id,
    ${alias}.name_phrase AS ${prefix}name_phrase,
    ${alias}.according_to_id AS ${prefix}according_to_id,
    ${alias}.reference_ids AS ${prefix}reference_ids,
    ${alias}.remarks AS ${prefix}remarks,
    ${alias}.created AS ${prefix}created,
    ${alias}.created_by AS ${prefix}created_by,
    ${alias}.modified AS ${prefix}modified,
    ${alias}.modified_by AS ${prefix}modified_by
  </sql>

  <sql id="SELECT">
    u.is_synonym,
    <include refid="life.catalogue.db.mapper.TaxonMapper.taxonCols">
      <property name="alias" value="u"/>
      <property name="prefix" value=""/>
    </include>,
    r.citation AS according_to,
    <include refid="life.catalogue.db.mapper.NameMapper.nameCols">
      <property name="alias" value="n"/>
      <property name="prefix" value="n_"/>
    </include>
    ,
    <include refid="life.catalogue.db.mapper.TaxonMapper.taxonCols">
      <property name="alias" value="a"/>
      <property name="prefix" value="a_"/>
    </include>,
    ar.citation AS a_according_to,
    <include refid="life.catalogue.db.mapper.NameMapper.nameCols">
      <property name="alias" value="an"/>
      <property name="prefix" value="a_n_"/>
    </include>
  </sql>

  <sql id="SELECT_SIMPLE">
    u.id, n.scientific_name, n.authorship, u.name_phrase, n.rank, n.code, u.status, u.parent_id
  </sql>

  <sql id="COLS_COPY">
    ${alias}sector_key,
    ${alias}verbatim_key,
    ${alias}status,
    ${alias}is_synonym,
    ${alias}origin,
    ${alias}name_phrase,
    ${alias}according_to_id,
    ${alias}reference_ids,
    ${alias}remarks,
    ${alias}created,
    ${alias}created_by,
    ${alias}modified,
    ${alias}modified_by,
    <!-- from TAXON -->
    ${alias}scrutinizer,
    ${alias}scrutinizer_date,
    ${alias}extinct,
    ${alias}temporal_range_start,
    ${alias}temporal_range_end,
    ${alias}environments,
    ${alias}link,
    <!-- calculated -->
    ${alias}dataset_sectors
  </sql>

  <sql id="COLS">
    dataset_key,
    sector_key,
    verbatim_key,
    parent_id,
    name_id,
    status,
    is_synonym,
    origin,
    name_phrase,
    according_to_id,
    reference_ids,
    remarks,
    created_by,
    modified_by
  </sql>

  <sql id="PROPS">
    #{datasetKey},
    #{sectorKey},
    #{verbatimKey},
    #{parentId},
    #{name.id},
    #{status}::TAXONOMICSTATUS,
    #{status.synonym},
    #{origin}::ORIGIN,
    #{namePhrase},
    #{accordingToId},
    #{referenceIds},
    #{remarks},
    #{createdBy},
    #{modifiedBy}
  </sql>

  <sql id="FROM_SIMPLE">
    name_usage_${partition} u JOIN name_${partition} n ON u.name_id=n.id
  </sql>

  <sql id="FROM">
    name_usage_${partition} u JOIN name_${partition} n ON u.name_id=n.id
    LEFT JOIN reference_${partition} r ON u.according_to_id=r.id
    LEFT JOIN name_usage_${partition} a ON u.parent_id=a.id AND u.is_synonym LEFT JOIN name_${partition} an ON a.name_id=an.id
    LEFT JOIN reference_${partition} ar ON a.according_to_id=ar.id
  </sql>

  <resultMap id="usageResultMap" type="NameUsageBase" autoMapping="true">
    <id property="id" column="id"/>
    <discriminator column="is_synonym" javaType="boolean">
      <case value="false" resultType="Taxon" resultMap="life.catalogue.db.mapper.TaxonMapper.taxonResultMap"/>
      <case value="true" resultType="Synonym" resultMap="life.catalogue.db.mapper.SynonymMapper.synonymResultMap"/>
    </discriminator>
  </resultMap>

  <resultMap id="bareNameResultMap" type="BareName" autoMapping="true">
    <id column="n_id"/>
    <association property="name" javaType="Name" resultMap="life.catalogue.db.mapper.NameMapper.nameResultMap" columnPrefix="n_"/>
  </resultMap>

  <resultMap id="simpleResultMap" type="SimpleName" autoMapping="true">
    <id property="id" column="id"/>
    <result property="parent" column="parent_id"/>
    <result property="name" column="scientific_name"/>
    <result property="phrase" column="name_phrase" />
  </resultMap>

  <resultMap id="simpleNidxResultMap" type="SimpleNameWithNidx" autoMapping="true">
    <id property="id" column="id"/>
    <result property="name" column="scientific_name"/>
    <result property="phrase" column="name_phrase" />
    <result property="namesIndexId" column="index_id" />
    <result property="namesIndexMatchType" column="type" />
  </resultMap>

  <resultMap id="idResultMap" type="UsageNameID" autoMapping="false">
    <id property="usageId" column="id"/>
    <result property="nameId" column="nid"/>
  </resultMap>


  <select id="count" resultType="integer">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    SELECT count(*) FROM name_usage_${partition}
  </select>

  <select id="get" resultMap="usageResultMap">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE u.id = #{key.id}
  </select>

  <select id="getSimple" resultMap="simpleResultMap">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/>
    WHERE u.id = #{key.id}
  </select>

  <select id="getSimpleByIdMap" resultMap="simpleResultMap">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    SELECT u.id, n.scientific_name, n.authorship, n.rank, n.code, u.status, coalesce(idp.id2, u.parent_id) AS parent_id
    FROM <include refid="FROM_SIMPLE"/>
      JOIN idmap_name_usage_${partition} idmap ON idmap.id=u.id
      LEFT JOIN idmap_name_usage_${partition} idp ON idp.id=u.parent_id
    WHERE idmap.id2 = #{key.id}
  </select>

  <select id="exists" resultType="boolean">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    SELECT exists(
      SELECT id FROM name_usage_${partition} WHERE id = #{key.id}
    )
  </select>

  <select id="listByRegex" resultMap="simpleResultMap">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/>
    WHERE n.scientific_name ~ '${regex}'
    <if test="rank != null">
      AND n.rank = #{rank}::RANK
    </if>
    <if test="status != null">
      AND u.status = #{status}::TAXONOMICSTATUS
    </if>
    ORDER BY n.scientific_name
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="list" resultMap="usageResultMap">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    ORDER BY u.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listByNameID" resultMap="usageResultMap">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE u.name_id=#{nameId}
    ORDER BY u.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listByNamesIndexID" resultMap="usageResultMap">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
      JOIN name_match nm ON nm.name_id=n.id AND nm.dataset_key=#{datasetKey}
      JOIN names_index ni ON ni.id=nm.index_id
    WHERE ni.id=#{nidx} OR ni.canonical_id=#{nidx}
    ORDER BY u.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listByNamesIndexIDGlobal" resultMap="usageResultMap">
    SELECT <include refid="SELECT"/>
    FROM name_usage u JOIN name n ON n.id=u.name_id AND n.dataset_key=u.dataset_key
      LEFT JOIN reference r ON r.id=u.according_to_id AND r.dataset_key=u.dataset_key
      LEFT JOIN name_usage a ON a.id=u.parent_id AND u.is_synonym AND a.dataset_key=u.dataset_key
      LEFT JOIN name an ON a.name_id=an.id AND an.dataset_key=u.dataset_key
      LEFT JOIN reference ar ON ar.id=a.according_to_id AND ar.dataset_key=u.dataset_key
      JOIN name_match nm ON nm.name_id=n.id AND nm.dataset_key=u.dataset_key
      JOIN names_index ni ON ni.id=nm.index_id
    WHERE ni.id=#{nidx} OR ni.canonical_id=#{nidx}
    ORDER BY u.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listRelated" resultMap="usageResultMap">
    SELECT <include refid="SELECT"/>
    FROM name_usage orig
      JOIN name_match nmo ON nmo.dataset_key=orig.dataset_key AND nmo.name_id=orig.name_id
      JOIN names_index ni ON ni.id=nmo.index_id
      JOIN name_match nm ON nm.index_id=ni.id OR nm.index_id=ni.canonical_id
    <!-- now join the related usages -->
    JOIN name n ON nm.name_id=n.id AND nm.dataset_key=n.dataset_key
    JOIN name_usage u ON u.name_id=n.id AND u.dataset_key=n.dataset_key
    <if test="publisherKey != null">
      JOIN dataset d ON d.key=u.dataset_key
    </if>
    LEFT JOIN reference r ON r.id=u.according_to_id AND r.dataset_key=u.dataset_key
    LEFT JOIN name_usage a ON a.id=u.parent_id AND u.is_synonym AND a.dataset_key=u.dataset_key
    LEFT JOIN name an ON a.name_id=an.id AND an.dataset_key=u.dataset_key
    LEFT JOIN reference ar ON ar.id=a.according_to_id AND ar.dataset_key=u.dataset_key
    WHERE orig.dataset_key=#{key.datasetKey} AND orig.id=#{key.id}
      AND (u.dataset_key!=#{key.datasetKey} OR u.id!=#{key.id})
    <if test="datasetKeys != null and !datasetKeys.isEmpty()">
      AND n.dataset_key IN <foreach item="id" collection="datasetKeys" open="(" separator="," close=")">#{id}</foreach>
    </if>
    <if test="publisherKey != null">
      AND d.gbif_publisher_key = #{publisherKey}
    </if>
    ORDER BY u.dataset_key, u.id
  </select>

  <select id="listByName" resultMap="usageResultMap">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE lower(n.scientific_name) = lower(#{name})
    <if test="rank != null">
      AND n.rank=#{rank}::rank
    </if>
    ORDER BY u.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="children" resultMap="usageResultMap">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE u.parent_id = #{key.id}
    <if test="rank != null">
      AND n.rank > #{rank}::rank
    </if>
  </select>

  <update id="updateParentIds" parameterType="map">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    UPDATE name_usage_${partition}
    SET (parent_id, modified, modified_by) = (#{newParentId}, now(), #{userKey})
    WHERE parent_id = #{parentId} <if test="sectorKey != null"> AND sector_key=#{sectorKey}</if>
  </update>

  <update id="updateParentId" parameterType="map">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    UPDATE name_usage_${partition}
    SET (parent_id, modified, modified_by) = (#{parentId}, now(), #{userKey})
    WHERE id = #{key.id}
  </update>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO name_usage_${newDatasetKey}
      (id, parent_id, name_id, dataset_key,
      <include refid="COLS_COPY"><property name="alias" value=""/></include>)
    SELECT coalesce(<if test="mapIds">mu.id2,</if>u.id), coalesce(<if test="mapIds">mp.id2,</if>u.parent_id), coalesce(<if test="mapIds">mn.id2,</if>u.name_id), #{newDatasetKey},
      <include refid="COLS_COPY"><property name="alias" value="u."/></include>
    FROM name_usage_${datasetKey} u
    <if test="mapIds">
      LEFT JOIN idmap_name_usage_${datasetKey} mu ON mu.id=u.id
      LEFT JOIN idmap_name_usage_${datasetKey} mp ON mp.id=u.parent_id
      LEFT JOIN idmap_name_${datasetKey} mn ON mn.id=u.name_id
    </if>
  </insert>

  <select id="processDataset" parameterType="map" resultMap="usageResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <where>
      <if test="maxRank != null">
        n.rank >= #{maxRank}::rank
      </if>
      <if test="minRank != null">
        AND n.rank &lt;= #{minRank}::rank
      </if>
    </where>
  </select>

  <select id="processDatasetBareNames" parameterType="map" resultMap="bareNameResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    SELECT
    <include refid="life.catalogue.db.mapper.NameMapper.nameCols">
      <property name="alias" value="n"/>
      <property name="prefix" value="n_"/>
    </include>
    FROM name_${partition} n
    LEFT JOIN name_usage_${partition} u ON n.id = u.name_id
    <where>
      u.id IS NULL
      <if test="maxRank != null">
        AND n.rank >= #{maxRank}::rank
      </if>
      <if test="minRank != null">
        AND n.rank &lt;= #{minRank}::rank
      </if>
    </where>
  </select>

  <select id="processSector" parameterType="map" resultMap="usageResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE u.sector_key = #{key.id}
  </select>

  <delete id="deleteBySector" parameterType="map">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    DELETE FROM name_usage_${partition} WHERE sector_key = #{key.id}
  </delete>

  <update id="removeSectorKey" parameterType="map">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    UPDATE name_usage_${partition} SET sector_key = NULL
    WHERE sector_key = #{key.id}
  </update>

  <select id="ambiguousZooRankNameIds" parameterType="map" resultType="string">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    SELECT DISTINCT n.id
    FROM <include refid="FROM_SIMPLE"/>
    WHERE u.sector_key = #{sectorKey}
      AND n.rank IN ()
      AND EXISTS (
        SELECT true
        FROM name_usage_${partition} u2 JOIN name_${partition} n2 ON u2.name_id=n2.id
        WHERE u2.sector_key = #{sectorKey}
          AND u2.parent_id
      )

    DELETE FROM name_usage_${partition} u
    USING name_${partition} n,
      name_usage_${partition} p, name_${partition} pn,
    WHERE u.name_id=n.id
      AND p.id=u.parent_id AND p.name_id=pn.id
      AND u.sector_key = #{key.id}
      AND n.rank IN ambiguousRank()
      AND pn.rank &lt;= 'GENUS'::rank
  </select>

  <delete id="deleteBySectorAndRank" parameterType="map">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    DELETE FROM name_usage_${partition} u
    USING name_${partition} n
    WHERE u.name_id=n.id
      AND u.sector_key = #{key.id}
      AND n.rank >= #{rank}::rank
      <if test="nameIds != null and !nameIds.isEmpty()">
        AND n.id NOT IN
        <foreach item="id" collection="nameIds" open="(" separator="," close=")">#{id}</foreach>
      </if>
  </delete>

  <delete id="deleteSynonymsBySector" parameterType="map">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    DELETE FROM name_usage_${partition} u
    WHERE u.sector_key = #{key.id} AND u.is_synonym
  </delete>

  <select id="deleteSubtree" parameterType="map" resultType="String">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    WITH RECURSIVE tree AS (
      SELECT id, name_id AS nid
      FROM name_usage_${partition}
      WHERE id=#{key.id}
    UNION
      SELECT c.id, c.name_id
      FROM name_usage_${partition} c JOIN tree ON tree.id = c.parent_id
    )
    DELETE
    FROM name_usage_${partition} u
    USING tree t
    WHERE u.id = t.id
    RETURNING t.nid;
  </select>

  <sql id="WHERE_START">
    <choose>
      <when test="startID != null">
        u.id = #{startID}
      </when>
      <otherwise>
        u.parent_id IS NULL
      </otherwise>
    </choose>
    AND NOT u.is_synonym
    <if test="lowestRank">
      AND (n.rank &lt;= #{lowestRank}::rank OR n.rank = 'UNRANKED'::rank)
    </if>
  </sql>

  <sql id="WHERE_UNION">
    <where>
      <if test="!includeSynonyms">
        NOT u.is_synonym
      </if>
      <if test="exclusions != null and !exclusions.isEmpty()">
        AND u.id NOT IN
        <foreach item="id" collection="exclusions" open="(" separator="," close=")">#{id}</foreach>
      </if>
      <if test="sectorKey != null">
        AND u.sector_key = #{sectorKey}
      </if>
      <if test="lowestRank">
        AND (n.rank &lt;= #{lowestRank}::rank OR n.rank = 'UNRANKED'::rank)
      </if>
    </where>
  </sql>

  <select id="processTree" parameterType="map" resultMap="usageResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    WITH RECURSIVE x AS(
    SELECT
    <include refid="SELECT"/>
    <if test="depthFirst">
      ,concat_ws('|', n.scientific_name, u.id) AS path
    </if>
    FROM
    <include refid="FROM"/>
    WHERE
    <include refid="WHERE_START"/>

    UNION

    SELECT
    <include refid="SELECT"/>
    <if test="depthFirst">
      ,concat_ws('|', x.path, not u.is_synonym, n.scientific_name, u.id) AS path
    </if>
    FROM
    <include refid="FROM"/>
    JOIN x ON x.id = u.parent_id
    <include refid="WHERE_UNION"/>
    )
    SELECT * FROM x
    <if test="depthFirst">
      ORDER BY x.path
    </if>
  </select>

  <select id="foreignChildren" resultMap="simpleResultMap">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/> JOIN name_usage_${partition} p ON p.id=u.parent_id
    WHERE p.sector_key=#{key.id}
    AND (u.sector_key IS NULL OR u.sector_key!=#{key.id})
  </select>

  <select id="sectorRoot" resultMap="simpleResultMap">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/> JOIN name_usage_${partition} p ON p.id=u.parent_id
    WHERE u.sector_key=#{key.id}
    AND (p.sector_key IS NULL OR p.sector_key!=#{key.id})
  </select>

  <select id="processTreeSimple" parameterType="map" resultMap="simpleResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    WITH RECURSIVE x AS(
      SELECT <include refid="SELECT_SIMPLE"/>, concat_ws('|', n.scientific_name, u.id) AS path
      FROM <include refid="FROM_SIMPLE"/>
      WHERE <include refid="WHERE_START"/>
    UNION
      SELECT <include refid="SELECT_SIMPLE"/>, concat_ws('|', x.path, not u.is_synonym, n.scientific_name, u.id)
      FROM <include refid="FROM_SIMPLE"/> JOIN x ON x.id = u.parent_id
      <include refid="WHERE_UNION"/>
    )
    SELECT id, scientific_name, authorship, rank, code, status, parent_id
    FROM x ORDER BY x.path
  </select>

  <select id="processTreeIds" parameterType="map" resultMap="idResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    WITH RECURSIVE tree AS (
    SELECT id, name_id AS nid
    FROM name_usage_${partition}
    WHERE id=#{key.id}
    UNION
    SELECT c.id, c.name_id
    FROM name_usage_${partition} c JOIN tree ON tree.id = c.parent_id
    )
    SELECT * FROM tree;
  </select>

  <select id="processNxIds" parameterType="map" resultMap="simpleNidxResultMap" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    SELECT u.id, nm.index_id, nm.type, n.rank, n.authorship, u.name_phrase, u.status, np.scientific_name AS parent, ni.canonical_id
    FROM name_usage_${partition} u
      JOIN name_${partition} n ON n.id=u.name_id
      LEFT JOIN name_usage_${partition} up ON up.id=u.parent_id
      LEFT JOIN name_${partition} np ON np.id=up.name_id
      LEFT JOIN name_match nm ON nm.name_id=n.id AND nm.dataset_key=#{datasetKey}
      LEFT JOIN names_index ni ON ni.id=nm.index_id
    ORDER BY ni.canonical_id, ni.id
  </select>

  <select id="processIds" parameterType="map" resultType="string" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
    <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
    SELECT id FROM name_usage_${partition}
  </select>

  <delete id="delete" parameterType="map">
    <include refid="life.catalogue.db.Common.partitionByKey"/>
    DELETE FROM name_usage_${partition}
    WHERE id = #{key.id}
  </delete>

</mapper>
