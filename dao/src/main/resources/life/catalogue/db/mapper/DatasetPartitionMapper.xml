<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.DatasetPartitionMapper">

  <update id="createDefaultPartition" parameterType="map">
    CREATE TABLE ${table}_default PARTITION OF ${table} DEFAULT PARTITION BY HASH(dataset_key);
  </update>

  <update id="createDefaultSubPartition" parameterType="map">
    CREATE TABLE ${table}_mod${remainder} PARTITION OF ${table}_default FOR VALUES WITH (modulus ${modulus}, remainder ${remainder});
  </update>

  <update id="createTable" parameterType="map">
    CREATE TABLE ${table}_${key} (LIKE ${table} INCLUDING DEFAULTS INCLUDING CONSTRAINTS INCLUDING GENERATED);
  </update>

  <update id="createIdMapTable" parameterType="map">
    CREATE TABLE ${table}_${key} (
      id TEXT PRIMARY KEY,
      id2 TEXT NOT NULL UNIQUE
    )
  </update>

  <update id="createDatasetKeyCheck" parameterType="map">
    ALTER TABLE ${table}_${key} ADD CONSTRAINT ${table}_${key}_dataset_key_check CHECK (dataset_key = ${key});
  </update>

  <update id="createSerial" parameterType="map">
    CREATE SEQUENCE IF NOT EXISTS ${table}_${key}_id_seq START 1;
    ALTER TABLE ${table}_${key} ALTER COLUMN id SET DEFAULT nextval('${table}_${key}_id_seq');
  </update>

  <update id="createIdSequence" parameterType="map">
    CREATE SEQUENCE IF NOT EXISTS ${table}_${key}_id_seq START 1
  </update>

  <update id="updateIdSequence" parameterType="map">
    SELECT setval('${table}_${key}_id_seq', (SELECT COALESCE(max(id),1) AS id FROM ${table} WHERE dataset_key = #{key}))
  </update>

  <delete id="deleteIdSequence" parameterType="map">
    DROP SEQUENCE IF EXISTS ${table}_${key}_id_seq
  </delete>

  <update id="attachTable" parameterType="map">
    ALTER TABLE ${table} ATTACH PARTITION ${table}_${key} FOR VALUES IN ( ${key} )
  </update>

  <update id="detachTable" parameterType="map">
    ALTER TABLE ${table} DETACH PARTITION ${table}_${key}
  </update>

  <select id="updateUsageCounter" parameterType="map" resultType="int">
    DELETE FROM usage_count WHERE dataset_key=#{key};
    INSERT INTO usage_count (dataset_key, counter) VALUES (${key}, (SELECT count(*) FROM name_usage WHERE dataset_key = ${key}));
    SELECT counter FROM usage_count WHERE dataset_key=#{key};
  </select>

  <update id="attachTriggers" parameterType="map">
    CREATE TRIGGER trg_name_${key} BEFORE INSERT OR UPDATE
    ON name_${key} FOR EACH ROW
    WHEN (NEW.homotypic_name_id IS NULL)
    EXECUTE PROCEDURE homotypic_name_id_default();

    CREATE TRIGGER trg_name_usage_${key}_insert
    AFTER INSERT ON name_usage_${key}
    REFERENCING NEW TABLE AS inserted
    FOR EACH STATEMENT
    EXECUTE FUNCTION track_usage_count();

    CREATE TRIGGER trg_name_usage_${key}_delete
    AFTER DELETE ON name_usage_${key}
    REFERENCING OLD TABLE AS deleted
    FOR EACH STATEMENT
    EXECUTE FUNCTION track_usage_count();
  </update>

  <update id="lockTables" parameterType="map">
    SELECT 1 FROM verbatim_${datasetKey} LIMIT 1;
    LOCK TABLE verbatim_${datasetKey} IN EXCLUSIVE mode;
    LOCK TABLE name_${datasetKey} IN EXCLUSIVE mode;
    LOCK TABLE name_usage_${datasetKey} IN EXCLUSIVE mode;
    LOCK TABLE reference_${datasetKey} IN EXCLUSIVE mode;
  </update>

  <update id="deleteData">
    DELETE FROM ${table} WHERE dataset_key=#{key};
  </update>

  <update id="dropTable" parameterType="map">
    DROP TABLE IF EXISTS ${table}_${key} CASCADE;
    DROP SEQUENCE IF EXISTS ${table}_${key}_id_seq;
  </update>

  <update id="deleteUsageCounter" parameterType="map">
    DELETE FROM usage_count WHERE dataset_key=#{key};
  </update>

  <select id="existsDatasetSpecific" parameterType="map" resultType="boolean">
    SELECT exists(
    SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'name_${key}'
    )
  </select>

  <select id="existingPartitions" resultType="integer">
    SELECT replace((i.inhrelid::regclass)::text, 'name_', '')::int AS datasetkey
    FROM pg_inherits i
    WHERE i.inhparent = 'public.name'::regclass
    ORDER BY datasetkey
  </select>

  <select id="columns" resultType="string">
    SELECT column_name FROM information_schema.columns
    WHERE table_name = #{t} AND column_name NOT IN('doc')
  </select>

</mapper>
