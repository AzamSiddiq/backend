<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.TreeMapper">

    <sql id="SELECT">
        t.dataset_key,
        t.id,
        t.parent_id,
        t.status,
        (select count(*) from name_usage_${partition} WHERE parent_id=t.id AND NOT is_synonym) AS child_count,
        t.dataset_sectors,
        <include refid="life.catalogue.db.mapper.NameMapper.minimalNameCols">
            <property name="alias" value="n"/>
            <property name="prefix" value=""/>
        </include>,
        <if test="type == null">
            t.sector_key AS sector_key,
            NULL AS est_key,
            NULL AS ed_key
        </if>
        <if test="type != null">
            <if test="type == @life.catalogue.api.model.TreeNode$Type@SOURCE">
                s.key AS sector_key,
                NULL AS est_key,
                <include refid="life.catalogue.db.mapper.DecisionMapper.SelectVar">
                    <property name="alias" value="ed."/>
                    <property name="prefix" value="ed_"/>
                </include>
            </if>
            <if test="type == @life.catalogue.api.model.TreeNode$Type@CATALOGUE">
                t.sector_key AS sector_key,
                NULL AS ed_key,
                <include refid="life.catalogue.db.mapper.EstimateMapper.SelectVar">
                    <property name="alias" value="est."/>
                    <property name="prefix" value="est_"/>
                </include>
            </if>
        </if>
    </sql>

    <sql id="FROM_USAGE">
        name_usage_${partition} t JOIN name_${partition} n ON t.name_id=n.id
    </sql>

    <sql id="FROM">
        <include refid="FROM_USAGE"/>
        LEFT JOIN decision  ed ON ed.subject_id=t.id AND  ed.dataset_key=#{catalogueKey} AND ed.subject_dataset_key=#{datasetKey}
        LEFT JOIN estimate est ON est.target_id=t.id AND est.dataset_key=#{datasetKey}
        LEFT JOIN sector     s ON  s.subject_id=t.id AND   s.dataset_key=#{catalogueKey} AND  s.subject_dataset_key=#{datasetKey}
    </sql>

    <resultMap id="treeResultMap" type="life.catalogue.api.model.TreeNode$TreeNodeMybatis" autoMapping="true">
        <id property="id" column="id" />
        <result property="datasetSectors" column="dataset_sectors" />
        <association property="_name" javaType="Name" resultMap="life.catalogue.db.mapper.NameMapper.nameResultMap" />
        <association property="decision" javaType="EditorialDecision" resultMap="life.catalogue.db.mapper.DecisionMapper.decisionResultMap" columnPrefix="ed_" notNullColumn="key"/>
        <collection property="estimates" ofType="SpeciesEstimate" resultMap="life.catalogue.db.mapper.EstimateMapper.estimateResultMap" columnPrefix="est_" notNullColumn="key"/>
    </resultMap>

    <select id="get" resultMap="treeResultMap">
        <include refid="life.catalogue.db.Common.partitionByKey"/>
        <bind name="datasetKey" value="key.datasetKey"/>
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE t.id = #{key.id}
    </select>

    <select id="root" resultMap="treeResultMap">
        <include refid="life.catalogue.db.Common.partitionByDatasetKey"/>
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE t.parent_id IS NULL AND NOT is_synonym
        ORDER BY n.rank, n.scientific_name
        <include refid="life.catalogue.db.Common.limit" />
    </select>

    <select id="children" resultMap="treeResultMap">
        <include refid="life.catalogue.db.Common.partitionByKey"/>
        <bind name="datasetKey" value="key.datasetKey"/>
        <if test="insertPlaceholder">
            WITH first AS (
                SELECT t.id, n.rank
                FROM <include refid="FROM_USAGE" />
                WHERE t.parent_id = #{key.id} AND NOT is_synonym
                <if test="rank!=null">
                    AND n.rank > #{rank}::rank
                </if>
                ORDER BY n.rank, n.scientific_name
                LIMIT 1
            )
        </if>
        SELECT <include refid="SELECT" />
        FROM <if test="insertPlaceholder">first, </if>
            <include refid="FROM" />
            <if test="insertPlaceholder">AND (s.placeholder_rank IS NULL OR s.placeholder_rank=first.rank)</if>
        WHERE t.parent_id = #{key.id} AND NOT t.is_synonym
            <if test="insertPlaceholder">AND first.rank=n.rank</if>
        ORDER BY n.rank, n.scientific_name
        <include refid="life.catalogue.db.Common.limit" />
    </select>

    <select id="parents" resultMap="treeResultMap">
        <include refid="life.catalogue.db.Common.partitionByKey"/>
        <bind name="datasetKey" value="key.datasetKey"/>
        WITH RECURSIVE x AS(
            SELECT <include refid="SELECT" />
            FROM <include refid="FROM" />
            WHERE t.id = #{key.id}
        UNION
            SELECT <include refid="SELECT" />
            FROM <include refid="FROM" />, x
            WHERE t.id = x.parent_id
        )
        SELECT *
        FROM x
     </select>

    <select id="childrenRanks" resultType="Rank">
        <include refid="life.catalogue.db.Common.partitionByKey"/>
        SELECT DISTINCT n.rank
        FROM <include refid="FROM_USAGE"/>
        WHERE t.parent_id = #{key.id}
        <if test="rank != null"> AND n.rank &lt; #{rank}::rank</if>
        ORDER BY n.rank
    </select>

</mapper>
