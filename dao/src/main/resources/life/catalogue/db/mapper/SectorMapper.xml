<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.SectorMapper">

  <sql id="SELECT">
    s.id,
    s.dataset_key,
    s.sync_attempt,
    s.dataset_attempt,
    s.subject_dataset_key,
    s.original_subject_id,
    s.subject_id,
    s.subject_name,
    s.subject_authorship,
    s.subject_rank,
    s.subject_code,
    s.subject_status,
    s.subject_parent,
    ts.id IS NULL AS subject_broken,
    s.target_id,
    s.target_name,
    s.target_authorship,
    s.target_rank,
    s.target_code,
    tt.id IS NULL AS target_broken,
    s.mode,
    s.code,
    s.placeholder_rank,
    s.ranks,
    s.entities,
    s.note,
    s.modified,
    s.modified_by,
    s.created,
    s.created_by,
    <include refid="size"/> AS size
  </sql>

  <sql id="size">coalesce(si.taxon_count,0) + coalesce(si.synonym_count,0) + coalesce(si.bare_name_count,0)</sql>

  <sql id="COLS">
    dataset_key,
    target_id,
    <include refid="COLS_NO_DATASETKEY"/>
  </sql>

  <sql id="COLS_NO_DATASETKEY">
    subject_dataset_key,
    subject_id,
    subject_name,
    subject_authorship,
    subject_rank,
    subject_code,
    subject_status,
    subject_parent,
    target_name,
    target_authorship,
    target_rank,
    target_code,
    mode,
    code,
    placeholder_rank,
    ranks,
    entities,
    note,
    modified,
    modified_by
  </sql>

  <sql id="PROPS">
    #{datasetKey},
    #{target.id},
    #{subjectDatasetKey},
    #{subject.id},
    #{subject.name},
    #{subject.authorship},
    #{subject.rank}::RANK,
    #{subject.code}::NOMCODE,
    #{subject.status}::TAXONOMICSTATUS,
    #{subject.parent},
    #{target.name},
    #{target.authorship},
    #{target.rank}::RANK,
    #{target.code}::NOMCODE,
    #{mode}::SECTOR_MODE,
    #{code}::NOMCODE,
    #{placeholderRank}::RANK,
    #{ranks, typeHandler=life.catalogue.db.type2.RankSetTypeHandler},
    #{entities, typeHandler=life.catalogue.db.type2.EntitySetTypeHandler},
    #{note},
    now(),
    #{modifiedBy}
  </sql>

  <sql id="FROM">
    sector s
    LEFT JOIN sector_import si ON s.id=si.sector_key AND s.dataset_key=si.dataset_key AND s.sync_attempt=si.attempt
    LEFT JOIN name_usage tt ON tt.id=s.target_id AND tt.dataset_key=s.dataset_key
    LEFT JOIN name_usage ts ON ts.id=s.subject_id AND ts.dataset_key=s.subject_dataset_key
  </sql>

  <sql id="WHERE">
    <if test="req != null">
      <where>
        <if test="req.broken">
          (tt.id IS NULL OR ts.id IS NULL)
        </if>
        <if test="req.id != null">
          AND (s.subject_id = #{req.id} OR s.target_id = #{req.id})
        </if>
        <if test="req.datasetKey != null">
          AND s.dataset_key = #{req.datasetKey}
        </if>
        <if test="req.subjectDatasetKey != null">
          AND s.subject_dataset_key = #{req.subjectDatasetKey}
        </if>
        <if test="req.rank != null">
          AND s.subject_rank = #{req.rank}::RANK
        </if>
        <if test="req.name != null">
          AND (s.subject_name ILIKE '%${req.name}%' OR s.target_name ILIKE '%${req.name}%')
        </if>
        <if test="req.lastSync != null">
          AND (si.finished IS NULL OR si.finished &lt; #{req.lastSync})
        </if>
        <if test="req.mode != null">
          AND s.mode = #{req.mode}::SECTOR_MODE
        </if>
        <if test="req.modifiedBy != null">
          AND s.modified_by = #{req.modifiedBy}
        </if>
        <if test="req.minSize != null">
          AND <include refid="size"/> >= #{req.minSize}
        </if>
        <if test="req.withoutData">
          AND NOT EXISTS (SELECT id FROM name_usage_${req.datasetKey} WHERE sector_key=s.id)
        </if>
      </where>
    </if>
  </sql>

  <resultMap id="sectorResultMap" type="Sector" autoMapping="true">
    <id property="id" column="id"/>
    <result property="ranks" column="ranks" typeHandler="life.catalogue.db.type2.RankSetTypeHandler"/>
    <result property="entities" column="entities" typeHandler="life.catalogue.db.type2.EntitySetTypeHandler"/>
    <association property="subject" javaType="SimpleNameLink" autoMapping="true" columnPrefix="subject_"/>
    <association property="target" javaType="SimpleNameLink" autoMapping="true" columnPrefix="target_"/>
  </resultMap>


  <select id="get" resultMap="sectorResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE s.id = #{key.id} AND s.dataset_key = #{key.datasetKey}
  </select>

  <select id="getBySubject" resultMap="sectorResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE subject_dataset_key = #{key.datasetKey}
    AND s.dataset_key = #{datasetKey}
    AND subject_id = #{key.id}
  </select>

  <select id="listByTarget" resultMap="sectorResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE target_id = #{key.id}
    AND s.dataset_key = #{key.datasetKey}
  </select>

  <select id="listByDataset" resultMap="sectorResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE subject_dataset_key = #{subjectDatasetKey}
    <if test="datasetKey != null">
      AND s.dataset_key = #{datasetKey}
    </if>
  </select>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM sector WHERE dataset_key = #{datasetKey}
  </delete>

  <select id="processSectors" parameterType="map" resultMap="sectorResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE subject_dataset_key = #{subjectDatasetKey}
    AND s.dataset_key = #{datasetKey}
    ORDER BY target_rank
  </select>

  <select id="listTargetDatasetKeys" resultType="integer">
    SELECT DISTINCT s.dataset_key
    FROM <include refid="FROM"/>
  </select>

  <insert id="create" parameterType="Sector" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO sector (id, <include refid="COLS"/>, original_subject_id, created_by )
    VALUES (nextval('sector_${datasetKey}_id_seq'), <include refid="PROPS"/>, #{subject.id}, #{createdBy} )
  </insert>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO sector (id, dataset_key, sync_attempt, dataset_attempt, target_id, <include refid="COLS_NO_DATASETKEY"/>, original_subject_id, created, created_by )
    SELECT s.id, #{newDatasetKey}, sync_attempt, dataset_attempt, coalesce(<if test="mapIds">m.id2,</if>s.target_id), <include refid="COLS_NO_DATASETKEY"/>, original_subject_id, created, created_by
    FROM sector s
    <if test="mapIds">
      LEFT JOIN idmap_name_usage_${datasetKey} m ON m.id=s.target_id
    </if>
    WHERE dataset_key=#{datasetKey}
  </insert>

  <update id="update" parameterType="Sector">
    UPDATE sector
    SET (<include refid="COLS"/>) = (<include refid="PROPS"/>)
    WHERE id = #{id} AND dataset_key=#{datasetKey}
  </update>

  <delete id="delete" parameterType="map">
    DELETE FROM sector
    WHERE id = #{key.id} AND dataset_key=#{key.datasetKey}
  </delete>

  <select id="list" resultMap="sectorResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE s.dataset_key=#{datasetKey}
    ORDER BY target_rank, id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listChildSectors" resultMap="sectorResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    JOIN name_usage t ON t.id=s.target_id
    WHERE t.dataset_key=#{key.datasetKey} AND t.sector_key=#{key.id} AND s.dataset_key=#{key.datasetKey}
    ORDER BY id
  </select>

  <select id="listByPriority" resultMap="sectorResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE s.dataset_key=#{datasetKey}
    <if test="mode != null and !mode.isEmpty()">
      AND s.mode IN
      <foreach item="m" collection="mode" open="(" separator=" OR " close=")">#{m}::SECTOR_MODE</foreach>
    </if>
    ORDER BY priority, id
  </select>

  <select id="listDescendantSectorKeys" resultType="Integer">
    WITH RECURSIVE x AS (
      SELECT t.id, s.id AS sid
      FROM name_usage t LEFT JOIN sector s ON t.id=s.target_id AND s.dataset_key=#{key.datasetKey}
      WHERE t.dataset_key=#{key.datasetKey} AND t.id=#{key.id}
    UNION
      SELECT t.id, s.id
      FROM name_usage t LEFT JOIN sector s ON t.id=s.target_id AND s.dataset_key=#{key.datasetKey}
      JOIN x ON x.id = t.parent_id
      WHERE t.dataset_key=#{key.datasetKey} AND NOT t.is_synonym
    )
    SELECT DISTINCT sid FROM x WHERE sid IS NOT NULL
  </select>

  <select id="count" resultType="integer">
    SELECT count(*)
    FROM <include refid="FROM"/>
    WHERE s.dataset_key=#{datasetKey}
  </select>

  <select id="countSearch" resultType="integer">
    SELECT count(*)
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
  </select>

  <select id="listProjectKeys" parameterType="map" resultType="integer">
    SELECT DISTINCT x.dataset_key
    FROM sector x JOIN dataset d ON d.key=x.dataset_key
    WHERE d.origin='PROJECT' AND x.subject_dataset_key = #{subjectDatasetKey}
  </select>

  <select id="search" resultMap="sectorResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
    ORDER BY id desc
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="processSearch" resultMap="sectorResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
    ORDER BY id desc
  </select>

  <select id="processDataset" parameterType="map" resultMap="sectorResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE s.dataset_key=#{datasetKey}
  </select>

  <update id="updateLastSync" parameterType="integer">
    UPDATE sector s
    SET sync_attempt = #{attempt}, dataset_attempt = d.attempt
    FROM dataset d
    WHERE s.id = #{key.id} AND s.dataset_key=#{key.datasetKey}
      AND d.key=s.subject_dataset_key
  </update>
</mapper>
