<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.DatasetSourceMapper">

  <sql id="SELECT">
    <include refid="life.catalogue.db.mapper.DatasetArchiveMapper.SELECT"/>,
    con.key AS containerKey,
    con.title AS containerTitle,
    con.creator[:coalesce((con.settings->>'source max container authors')::int, 100)] AS containerCreator
  </sql>

  <sql id="COLS">
    <include refid="life.catalogue.db.mapper.DatasetArchiveMapper.COLS"/>
  </sql>

  <sql id="PROPS">
    #{obj.type}::datasettype,
    <include refid="life.catalogue.db.mapper.DatasetPatchMapper.PROPS"/>
  </sql>

  <sql id="FROM">
    dataset_source d
      LEFT JOIN dataset_import di ON d.attempt=di.attempt AND d.key=di.dataset_key
      LEFT JOIN dataset con ON con.key = #{datasetKey}
  </sql>

  <resultMap id="datasetSourceReleaseResultMap" type="Dataset" extends="life.catalogue.db.mapper.DatasetMapper.datasetResultMap">
    <id property="key" column="key"/>
    <result property="containerCreator" column="containerCreator" typeHandler="life.catalogue.db.type.AgentArrayTypeHandler"/>
    <collection property="source" ofType="Citation" column="{datasetKey=key, releaseKey=dataset_key}" select="life.catalogue.db.mapper.CitationMapper.listRelease" />
  </resultMap>

  <resultMap id="datasetSourceProjectResultMap" type="Dataset" extends="life.catalogue.db.mapper.DatasetMapper.datasetResultMap">
    <id property="key" column="key"/>
    <result property="containerCreator" column="containerCreator" typeHandler="life.catalogue.db.type.AgentArrayTypeHandler"/>
  </resultMap>

  <select id="listProjectSources" parameterType="map" resultMap="datasetSourceProjectResultMap" resultOrdered="true" fetchSize="100" resultSetType="FORWARD_ONLY">
    WITH src AS (
      SELECT s.subject_dataset_key AS key, max(s.dataset_attempt) AS attempt
      FROM sector s
      WHERE s.dataset_key=#{datasetKey}
      GROUP BY s.subject_dataset_key
    )
    <!-- archived dataset metadata -->
    SELECT <include refid="SELECT"/>
    FROM src
      JOIN dataset d2 ON d2.key = src.key
      LEFT JOIN dataset_archive d ON d.key = src.key AND d.attempt = src.attempt
      LEFT JOIN dataset_import di ON di.dataset_key = d.key AND di.attempt = d.attempt
      LEFT JOIN dataset con ON con.key = #{datasetKey}
    WHERE src.attempt != d2.attempt

    UNION

    <!-- latest dataset metadata -->
    SELECT <include refid="SELECT"/>
    FROM src
      JOIN dataset d ON d.key = src.key
      LEFT JOIN dataset_import di ON di.dataset_key = d.key AND di.attempt = d.attempt
      LEFT JOIN dataset con ON con.key = #{datasetKey}
    WHERE src.attempt = d.attempt OR src.attempt IS NULL

    ORDER BY 1
  </select>

  <select id="listReleaseSources" parameterType="map" resultMap="datasetSourceReleaseResultMap" resultOrdered="true" fetchSize="100" resultSetType="FORWARD_ONLY">
    SELECT d.dataset_key, <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE d.dataset_key = #{datasetKey}
  </select>

  <select id="getProjectSource" resultMap="datasetSourceProjectResultMap">
    WITH src AS (
      SELECT max(s.dataset_attempt) AS attempt
      FROM sector s
      WHERE s.dataset_key=#{datasetKey} AND s.subject_dataset_key=#{key}
    )
    <!-- archived dataset metadata -->
    SELECT <include refid="SELECT"/>
    FROM src
      JOIN dataset d2 ON d2.key = #{key}
      LEFT JOIN dataset_archive d ON d.key = #{key} AND d.attempt = src.attempt
      LEFT JOIN dataset_import di ON di.dataset_key = d.key AND di.attempt = d.attempt
      LEFT JOIN dataset con ON con.key = #{datasetKey}
    WHERE src.attempt != d2.attempt

    UNION

    <!-- latest dataset metadata -->
    SELECT <include refid="SELECT"/>
    FROM src
      JOIN dataset d ON d.key = #{key}
      LEFT JOIN dataset_import di ON di.dataset_key = d.key AND di.attempt = d.attempt
      LEFT JOIN dataset con ON con.key = #{datasetKey}
    WHERE src.attempt = d.attempt OR src.attempt IS NULL
  </select>

  <select id="getReleaseSource" resultMap="datasetSourceReleaseResultMap">
    SELECT d.dataset_key, <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE d.key = #{key} AND d.dataset_key = #{datasetKey}
  </select>

  <insert id="create" parameterType="map">
    INSERT INTO dataset_source (key, dataset_key, attempt, <include refid="COLS"/>, source_key, origin,  created, modified)
    VALUES (#{obj.key}, #{datasetKey}, #{obj.attempt}, <include refid="PROPS"/>, #{obj.sourceKey}, #{obj.origin}::DATASETORIGIN, now(), now())
  </insert>

  <delete id="delete" parameterType="map">
    DELETE FROM dataset_source WHERE dataset_key = #{datasetKey} AND key = #{key};
  </delete>

  <delete id="deleteByRelease" parameterType="map">
    DELETE FROM dataset_source WHERE dataset_key = #{datasetKey};
  </delete>

</mapper>
