<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.DatasetMapper">

  <sql id="SELECT">
    <include refid="life.catalogue.db.mapper.DatasetArchiveMapper.SELECT"/>,
    d.deleted,
    d.gbif_key,
    d.gbif_publisher_key,
    d.private,
    (coalesce(di.taxon_count,0) + coalesce(di.synonym_count,0) + coalesce(di.bare_name_count,0)) AS size,
    (select array_agg(distinct s.dataset_key) from sector s where s.subject_dataset_key=d.key) AS contributes_to
  </sql>

  <sql id="COLS">
    <include refid="life.catalogue.db.mapper.DatasetArchiveMapper.COLS"/>,
    deleted,
    gbif_key,
    gbif_publisher_key,
    private
  </sql>


  <sql id="PROPS">
    <include refid="life.catalogue.db.mapper.DatasetArchiveMapper.PROPS"/>,
    #{deleted},
    #{gbifKey},
    #{gbifPublisherKey},
    #{privat}
  </sql>

  <sql id="FROM">
    dataset d LEFT JOIN dataset_import di ON di.attempt=d.import_attempt AND di.dataset_key=coalesce(d.source_key,d.key)
  </sql>

  <sql id="PRIVATE">
    <!-- magic number for admins -->
    <if test="userKey != -42">
      AND (NOT ${alias}.private <if test="userKey != null">OR ${alias}.editors @> ARRAY[#{userKey}::int]</if>)
    </if>
  </sql>

  <sql id="SEARCH_WHERE">
    <!-- always hide the names index -->
    d.deleted IS NULL AND d.key != 1
    <include refid="PRIVATE">
      <property name="alias" value="d"/>
    </include>
    <if test="req != null">
      <if test="req.q != null">
        AND (
        f_unaccent(title) ILIKE f_unaccent('%${req.q}%')
        OR f_unaccent(alias) ILIKE f_unaccent('%${req.q}%')
        OR doc @@ plainto_tsquery('simple2', #{req.q})
        )
      </if>
      <if test="req.privat != null">
        AND d.private = #{req.privat}
      </if>
      <if test="req.code != null">
        AND d.settings @> jsonb_build_object('NOMENCLATURAL_CODE', #{req.code})
      </if>
      <if test="req.type != null">
        AND d.type=#{req.type}::DATASETTYPE
      </if>
      <if test="req.origin != null">
        AND d.origin=#{req.origin}::DATASETORIGIN
      </if>
      <if test="req.contributesTo != null">
        AND exists(
          SELECT 1 FROM sector s JOIN dataset pr ON pr.key=s.dataset_key
          WHERE s.dataset_key=#{req.contributesTo} AND s.subject_dataset_key=d.key
          <include refid="PRIVATE"><property name="alias" value="pr"/></include>
        )
      </if>
      <if test="req.hasSourceDataset != null">
        AND exists(
          SELECT 1 FROM sector s JOIN dataset pr ON pr.key=s.dataset_key
          WHERE subject_dataset_key=#{req.hasSourceDataset} AND s.dataset_key=d.key
        )
      </if>
      <if test="req.releasedFrom != null">
        AND d.source_key=#{req.releasedFrom}
      </if>
      <if test="req.format != null">
        AND d.settings @> jsonb_build_object('DATA_FORMAT', #{req.format})
      </if>
      <if test="req.modifiedBy != null">
        AND d.modified_by = #{req.modifiedBy}
      </if>
      <if test="req.modified != null">
        AND di.finished > #{req.modified}
      </if>
      <if test="req.created != null">
        AND created > #{req.created}
      </if>
      <if test="req.released != null">
        AND released > #{req.released}
      </if>
      <if test="req.minSize != null">
        AND di.verbatim_count >= #{req.minSize}
      </if>

    </if>
  </sql>

  <!--  A mapping to Name, mostly auto mapped -->
  <resultMap id="datasetResultMap" type="Dataset" autoMapping="true" extends="life.catalogue.db.mapper.DatasetArchiveMapper.archiveResultMap">
    <id property="key" column="key"/>
    <result property="privat" column="private"/>
    <result property="contributesTo" column="contributes_to" typeHandler="life.catalogue.db.type2.IntegerSetTypeHandler"/>
  </resultMap>

  <resultMap id="settingsResultMap" type="DatasetSettings" autoMapping="false">
    <id column="key"/>
    <result property="settings" column="settings" typeHandler="life.catalogue.db.type2.SettingsTypeHandler"/>
  </resultMap>

  <select id="keys" resultType="integer">
    SELECT key
    FROM dataset
    WHERE deleted IS NULL
    <if test="origin != null and origin.length > 0">
      AND origin IN <foreach item="o" collection="origin" open="(" separator="," close=")">#{o}::DATASETORIGIN</foreach>
    </if>
  </select>

  <select id="process" parameterType="map" resultMap="datasetResultMap" resultOrdered="true" fetchSize="100" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE deleted IS NULL
    <if test="filter != null">AND ${filter}</if>
  </select>

  <select id="count" resultType="integer">
    SELECT COUNT(*)
    FROM
    <include refid="FROM"/>
    WHERE
    <include refid="SEARCH_WHERE"/>
  </select>

  <select id="search" resultMap="datasetResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE <include refid="SEARCH_WHERE"/>
    ORDER BY
    <bind name="rev" value="req.reverse"/>
    <choose>
      <when test="req == null || req.sortBy == null">
        key
      </when>
      <otherwise>
        <bind name="sortBy" value="req.sortBy.name()"/>
        <choose>
          <when test="sortBy == 'RELEVANCE'">
            ts_rank_cd(doc, plainto_tsquery('simple2', #{req.q}))
            <bind name="rev" value="!req.reverse"/>
          </when>
          <when test="sortBy == 'SIZE' || sortBy == 'CREATED' || sortBy == 'MODIFIED'">
            ${req.sortBy.name().toLowerCase()}
            <bind name="rev" value="!req.reverse"/>
          </when>
          <when test="sortBy == 'AUTHORS'">
            lower(authors_and_editors[1])
          </when>
          <when test="sortBy == 'TITLE'">
            lower(title)
          </when>
          <otherwise>
            ${req.sortBy.name().toLowerCase()}
          </otherwise>
        </choose>
      </otherwise>
    </choose>
    <choose>
      <when test="rev">DESC NULLs LAST</when>
      <otherwise>ASC NULLs FIRST</otherwise>
    </choose>
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="list" resultMap="datasetResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE deleted IS NULL AND NOT private
    ORDER BY key
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listNeverImported" resultMap="datasetResultMap">
    SELECT
    <include refid="SELECT"/>
    FROM dataset d
    LEFT JOIN dataset_import di ON di.dataset_key=d.key
    WHERE d.deleted IS NULL
    AND d.origin = 'EXTERNAL'
    AND coalesce((d.settings ->> 'import frequency')::int, 0) >= 0
    AND di.attempt IS NULL
    ORDER BY d.key ASC
    LIMIT #{limit}
  </select>

  <select id="listToBeImported" resultMap="datasetResultMap">
    SELECT *
    FROM (
      SELECT DISTINCT ON (d.key) di.state, di.finished,
      <include refid="SELECT"/>, (settings ->> 'import frequency')::int AS frequency
      FROM dataset d
      LEFT JOIN dataset_import di ON di.dataset_key=d.key
      WHERE d.deleted IS NULL
      AND d.origin = 'EXTERNAL'
      AND di.finished IS NOT NULL
      AND coalesce((d.settings ->> 'import frequency')::int, 0) > 0
      ORDER BY d.key, di.attempt DESC
    ) AS latest
    WHERE state != 'WAITING'::importstate AND (finished + frequency * interval '1 day') &lt; now()
    ORDER BY finished ASC
    LIMIT #{limit}
  </select>

  <select id="exists" resultType="boolean">
    SELECT EXISTS (
    SELECT 1 FROM dataset WHERE key = #{key} AND deleted IS NULL
    )
  </select>

  <select id="isPrivate" resultType="boolean">
    SELECT EXISTS (
    SELECT 1 FROM dataset WHERE key = #{key} AND deleted IS NULL
    ) AND (
    SELECT private FROM dataset WHERE key = #{key}
    )
  </select>

  <select id="latestRelease" resultType="integer">
    SELECT key FROM dataset
    WHERE source_key = #{key} AND deleted IS NULL
    ORDER BY created DESC
    LIMIT 1
  </select>

  <select id="get" resultMap="datasetResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE key = #{key}
  </select>

  <select id="getByGBIF" resultMap="datasetResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE gbif_key = #{key}
  </select>

  <!--  makes sure to add creator to editors -->
  <insert id="create" parameterType="Dataset" useGeneratedKeys="true" keyProperty="key">
    INSERT INTO dataset (<include refid="COLS"/>, source_key, origin, editors, created, modified)
    VALUES (<include refid="PROPS"/>, #{sourceKey}, #{origin}::DATASETORIGIN, array[#{createdBy}::int], now(), now())
  </insert>

  <!--  makes sure to add creator to editors -->
  <insert id="createWithKey" parameterType="Dataset" useGeneratedKeys="false">
    INSERT INTO dataset (key,<include refid="COLS"/>, source_key, origin, editors, created, modified)
    VALUES (#{key},<include refid="PROPS"/>, #{sourceKey}, #{origin}::DATASETORIGIN, array[#{createdBy}::int], now(), now())
  </insert>

  <select id="getSettings" resultMap="settingsResultMap">
    SELECT key, settings
    FROM dataset
    WHERE key = #{key}
  </select>

  <update id="updateSettings" parameterType="map">
    UPDATE dataset SET (settings, modified_by, modified) =
      ( #{settings, typeHandler=life.catalogue.db.type2.SettingsTypeHandler}::JSONB, #{userKey}, now() )
    WHERE key = #{key}
  </update>

  <select id="getEditors" resultType="it.unimi.dsi.fastutil.ints.IntSet">
    SELECT editors || array[created_by]
    FROM dataset
    WHERE key = #{key}
  </select>

  <update id="updateEditors" parameterType="map">
    UPDATE dataset  SET (editors, modified_by, modified) =
      ( #{editors, typeHandler=life.catalogue.db.type.IntSetTypeHandler}, #{userKey}, now() )
    WHERE key = #{key}
  </update>

  <update id="addEditor" parameterType="map">
    UPDATE dataset SET (editors, modified_by, modified) =
      ( editors || #{editor}, #{userKey}, now() )
    WHERE key = #{key}
  </update>

  <update id="removeEditor" parameterType="map">
    UPDATE dataset  SET (editors, modified_by, modified) =
      ( array_remove(editors, #{editor}), #{userKey}, now() )
    WHERE key = #{key}
  </update>

  <update id="update" parameterType="Dataset">
    UPDATE dataset
    SET (<include refid="COLS"/>, modified)
    = (<include refid="PROPS"/>, now())
    WHERE key = #{key}
  </update>

  <select id="lastImportAttempt" resultType="Integer">
    SELECT import_attempt
    FROM dataset
    WHERE key=#{key}
  </select>

  <update id="updateLastImport" parameterType="integer">
    UPDATE dataset
    SET import_attempt = #{attempt}
    WHERE key = #{key}
  </update>

  <update id="delete" parameterType="map">
    UPDATE dataset SET deleted = now(), import_attempt=null, alias=null, gbif_key=null
    WHERE key = #{key}
  </update>

  <delete id="deletePhysically" parameterType="map">
    DELETE FROM dataset WHERE key = #{key}
  </delete>

</mapper>
