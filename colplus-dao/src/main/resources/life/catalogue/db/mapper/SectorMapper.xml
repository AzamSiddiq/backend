<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.SectorMapper">

  <sql id="SelectVar">
    ${alias}key AS ${prefix}key,
    ${alias}dataset_key AS ${prefix}dataset_key,
    ${alias}subject_dataset_key AS ${prefix}subject_dataset_key,
    ${alias}subject_id AS ${prefix}subject_id,
    ${alias}subject_name AS ${prefix}subject_name,
    ${alias}subject_authorship AS ${prefix}subject_authorship,
    ${alias}subject_rank AS ${prefix}subject_rank,
    ${alias}subject_code AS ${prefix}subject_code,
    ${alias}subject_status AS ${prefix}subject_status,
    ${alias}subject_parent AS ${prefix}subject_parent,
    ${alias}target_id AS ${prefix}target_id,
    ${alias}target_name AS ${prefix}target_name,
    ${alias}target_authorship AS ${prefix}target_authorship,
    ${alias}target_rank AS ${prefix}target_rank,
    ${alias}target_code AS ${prefix}target_code,
    ${alias}mode AS ${prefix}mode,
    ${alias}code AS ${prefix}code,
    ${alias}ranks AS ${prefix}ranks,
    ${alias}entities AS ${prefix}entities,
    ${alias}note AS ${prefix}note,
    ${alias}modified AS ${prefix}modified,
    ${alias}modified_by AS ${prefix}modified_by,
    ${alias}created AS ${prefix}created,
    ${alias}created_by AS ${prefix}created_by
  </sql>

  <sql id="SELECT">
    <include refid="life.catalogue.db.mapper.SectorMapper.SelectVar">
      <property name="alias" value="s."/>
      <property name="prefix" value=""/>
    </include>
  </sql>

  <sql id="COLS">
    dataset_key,
    subject_dataset_key,
    subject_id,
    subject_name,
    subject_authorship,
    subject_rank,
    subject_code,
    subject_status,
    subject_parent,
    target_id,
    target_name,
    target_authorship,
    target_rank,
    target_code,
    mode,
    code,
    ranks,
    entities,
    note,
    modified,
    modified_by
  </sql>

  <sql id="PROPS">
    #{datasetKey},
    #{subjectDatasetKey},
    #{subject.id},
    #{subject.name},
    #{subject.authorship},
    #{subject.rank}::RANK,
    #{subject.code}::NOMCODE,
    #{subject.status}::TAXONOMICSTATUS,
    #{subject.parent},
    #{target.id},
    #{target.name},
    #{target.authorship},
    #{target.rank}::RANK,
    #{target.code}::NOMCODE,
    #{mode}::SECTOR_MODE,
    #{code}::NOMCODE,
    #{ranks, typeHandler=life.catalogue.db.type2.RankSetTypeHandler},
    #{entities, typeHandler=life.catalogue.db.type2.EntitySetTypeHandler},
    #{note},
    now(),
    #{modifiedBy}
  </sql>

  <sql id="FROM">
    sector s LEFT JOIN sector_import si ON si.sector_key=s.key AND s.last_sync_attempt=si.attempt
  </sql>

  <sql id="WHERE">
    <if test="req != null">
      <if test="req.broken">
        LEFT JOIN name_usage tt ON tt.id=s.target_id AND tt.dataset_key=s.dataset_key
        LEFT JOIN name_usage ts ON ts.id=s.subject_id AND ts.dataset_key=s.subject_dataset_key
      </if>
      <where>
        <if test="req.broken">
          (tt.id IS NULL OR ts.id IS NULL)
        </if>
        <if test="req.id != null">
          AND s.subject_id = #{req.id}
        </if>
        <if test="req.datasetKey != null">
          AND s.dataset_key = #{req.datasetKey}
        </if>
        <if test="req.subjectDatasetKey != null">
          AND s.subject_dataset_key = #{req.subjectDatasetKey}
        </if>
        <if test="req.rank != null">
          AND s.subject_rank = #{req.rank}::RANK
        </if>
        <if test="req.name != null">
          AND (s.subject_name = #{req.name} OR s.target_name = #{req.name})
        </if>
        <if test="req.lastSync != null">
          AND (si.finished IS NULL OR si.finished &lt; #{req.lastSync})
        </if>
        <if test="req.mode != null">
          AND s.mode = #{req.mode}::SECTOR_MODE
        </if>
        <if test="req.userKey != null">
          AND s.modified_by = #{req.userKey}
        </if>
      </where>
    </if>
  </sql>

  <!-- A mapping to Distribution, mostly auto mapped -->
  <resultMap id="sectorResultMap" type="Sector" autoMapping="true">
    <id property="key" column="key" />
    <result property="ranks" column="ranks" typeHandler="life.catalogue.db.type2.RankSetTypeHandler" />
    <result property="entities" column="entities" typeHandler="life.catalogue.db.type2.EntitySetTypeHandler" />
    <association property="subject" javaType="SimpleName" autoMapping="true" columnPrefix="subject_" />
    <association property="target" javaType="SimpleName" autoMapping="true" columnPrefix="target_" />
  </resultMap>

  <select id="get" resultMap="sectorResultMap">
    SELECT <include refid="SELECT" />
    FROM <include refid="FROM" />
    WHERE key = #{key}
  </select>

  <select id="getBySubject" resultMap="sectorResultMap">
    SELECT <include refid="SELECT" />
    FROM <include refid="FROM" />
    WHERE subject_dataset_key = #{subjectDatasetKey}
      AND dataset_key = #{datasetKey}
      AND subject_id = #{id}
  </select>

  <select id="listByTarget" resultMap="sectorResultMap">
    SELECT <include refid="SELECT" />
    FROM <include refid="FROM" />
    WHERE target_id = #{id}
      AND dataset_key = #{datasetKey}
  </select>

  <select id="listByDataset" resultMap="sectorResultMap">
    SELECT <include refid="SELECT" />
    FROM <include refid="FROM" />
    WHERE subject_dataset_key = #{subjectDatasetKey}
    <if test="datasetKey != null">
      AND dataset_key = #{datasetKey}
    </if>
  </select>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM sector WHERE dataset_key = #{datasetKey}
  </delete>

  <select id="processSectors" parameterType="map" resultMap="sectorResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT" />
    FROM <include refid="FROM" />
    WHERE subject_dataset_key = #{subjectDatasetKey}
      AND dataset_key = #{targetDatasetKey}
    ORDER BY target_rank
  </select>

  <select id="listTargetDatasetKeys" resultType="integer">
    SELECT DISTINCT dataset_key
    FROM <include refid="FROM" />
  </select>

  <insert id="create" parameterType="Sector" useGeneratedKeys="true" keyProperty="key">
    INSERT INTO sector ( <include refid="COLS" />, created_by )
    VALUES ( <include refid="PROPS" />, #{createdBy} )
  </insert>

  <update id="update" parameterType="Sector">
    UPDATE sector
    SET (<include refid="COLS" />) = (<include refid="PROPS" />)
    WHERE key = #{key}
  </update>

  <delete id="delete" parameterType="map">
    DELETE FROM sector
    WHERE key = #{key}
  </delete>

  <select id="list" resultMap="sectorResultMap">
    SELECT <include refid="SELECT" />
    FROM <include refid="FROM" />
    ORDER BY target_rank, key
    <include refid="life.catalogue.db.Common.limit" />
  </select>

  <select id="listChildSectors" resultMap="sectorResultMap">
    SELECT <include refid="SELECT" />
    FROM <include refid="FROM" />
      JOIN name_usage_${targetDatasetKey} t ON t.id=s.target_id
    WHERE t.sector_key=#{key}
    ORDER BY key
  </select>

  <select id="countSearch" resultType="integer">
    SELECT count(*)
    FROM <include refid="FROM" />
    <include refid="WHERE"/>
  </select>

  <select id="search" resultMap="sectorResultMap">
    SELECT <include refid="SELECT" />
    FROM <include refid="FROM" />
    <include refid="WHERE"/>
    ORDER BY key desc
    <include refid="life.catalogue.db.Common.limit" />
  </select>

  <select id="processDataset" parameterType="map" resultMap="sectorResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT" />
    FROM <include refid="FROM" />
    WHERE dataset_key=#{datasetKey}
  </select>

  <update id="updateLastSync" parameterType="integer">
    UPDATE sector
    SET last_sync_attempt = #{attempt}
    WHERE key = #{key}
  </update>
</mapper>
