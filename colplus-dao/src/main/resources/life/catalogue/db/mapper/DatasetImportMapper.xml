<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.DatasetImportMapper">

    <sql id="SELECT">
      dataset_key,
      attempt,
      state,
      <include refid="life.catalogue.db.mapper.DatasetImportMapper.metricsCols"/>,
      md5,
      download_uri,
      download,
      verbatim_count,
      verbatim_by_type_count,
      verbatim_by_term_count
    </sql>

    <sql id="metricsCols">
      error,
      started,
      finished,
      name_count,
      taxon_count,
      synonym_count,
      reference_count,
      vernacular_count,
      distribution_count,
      issues_count,
      names_by_rank_count,
      taxa_by_rank_count,
      names_by_type_count,
      vernaculars_by_language_count,
      distributions_by_gazetteer_count,
      names_by_origin_count,
      usages_by_status_count,
      names_by_status_count,
      name_relations_by_type_count
    </sql>

    <sql id="COLS">
      dataset_key,
      state,
      <include refid="life.catalogue.db.mapper.DatasetImportMapper.metricsCols"/>,
      md5,
      download_uri,
      download,
      verbatim_count,
      verbatim_by_type_count,
      verbatim_by_term_count
    </sql>

    <sql id="metricsProps">
      #{imp.error},
      #{imp.started},
      #{imp.finished},
      #{imp.nameCount},
      #{imp.taxonCount},
      #{imp.synonymCount},
      #{imp.referenceCount},
      #{imp.vernacularCount},
      #{imp.distributionCount},
      #{imp.issuesCount, typeHandler=life.catalogue.db.type2.HstoreIssueCountTypeHandler}::hstore,
      #{imp.namesByRankCount, typeHandler=life.catalogue.db.type2.HstoreRankCountTypeHandler}::hstore,
      #{imp.taxaByRankCount, typeHandler=life.catalogue.db.type2.HstoreRankCountTypeHandler}::hstore,
      #{imp.namesByTypeCount, typeHandler=life.catalogue.db.type2.HstoreNameTypeCountTypeHandler}::hstore,
      #{imp.vernacularsByLanguageCount, typeHandler=life.catalogue.db.type2.HstoreLanguageCountTypeHandler}::hstore,
      #{imp.distributionsByGazetteerCount, typeHandler=life.catalogue.db.type2.HstoreGazetteerCountTypeHandler}::hstore,
      #{imp.namesByOriginCount, typeHandler=life.catalogue.db.type2.HstoreOriginCountTypeHandler}::hstore,
      #{imp.usagesByStatusCount, typeHandler=life.catalogue.db.type2.HstoreTaxStatusCountTypeHandler}::hstore,
      #{imp.namesByStatusCount, typeHandler=life.catalogue.db.type2.HstoreNomStatusCountTypeHandler}::hstore,
      #{imp.nameRelationsByTypeCount, typeHandler=life.catalogue.db.type2.HstoreNameRelCountTypeHandler}::hstore
    </sql>

    <sql id="PROPS">
      #{imp.datasetKey},
      #{imp.state}::IMPORTSTATE,
      <include refid="life.catalogue.db.mapper.DatasetImportMapper.metricsProps"/>,
      #{imp.md5},
      #{imp.downloadUri},
      #{imp.download},
      #{imp.verbatimCount},
      #{imp.verbatimByTypeCount},
      #{imp.verbatimByTermCount, typeHandler=life.catalogue.db.type2.NestedTermMapTypeHandler}::jsonb
    </sql>

    <sql id="FROM">
      dataset_import
    </sql>

    <sql id="WHERE">
        <where>
            <if test="key != null">
                dataset_key = #{key}
            </if>
            <if test="states != null &amp;&amp; !states.isEmpty()">
                AND state IN
                <foreach item="state" index="idx" collection="states" open="(" separator="," close=")">
                    #{state}::IMPORTSTATE
                </foreach>
            </if>
        </where>
    </sql>

    <!--  A mapping to Name, mostly auto mapped -->
    <resultMap id="datasetImportResultMap" type="DatasetImport" autoMapping="true">
        <result property="issuesCount" column="issues_count" typeHandler="life.catalogue.db.type2.HstoreIssueCountTypeHandler"/>
        <result property="namesByRankCount" column="names_by_rank_count" typeHandler="life.catalogue.db.type2.HstoreRankCountTypeHandler"/>
        <result property="taxaByRankCount" column="taxa_by_rank_count" typeHandler="life.catalogue.db.type2.HstoreRankCountTypeHandler"/>
        <result property="namesByTypeCount" column="names_by_type_count" typeHandler="life.catalogue.db.type2.HstoreNameTypeCountTypeHandler"/>
        <result property="vernacularsByLanguageCount" column="vernaculars_by_language_count" typeHandler="life.catalogue.db.type2.HstoreLanguageCountTypeHandler"/>
        <result property="distributionsByGazetteerCount" column="distributions_by_gazetteer_count" typeHandler="life.catalogue.db.type2.HstoreGazetteerCountTypeHandler"/>
        <result property="namesByOriginCount" column="names_by_origin_count" typeHandler="life.catalogue.db.type2.HstoreOriginCountTypeHandler"/>
        <result property="usagesByStatusCount" column="usages_by_status_count" typeHandler="life.catalogue.db.type2.HstoreTaxStatusCountTypeHandler"/>
        <result property="namesByStatusCount" column="names_by_status_count" typeHandler="life.catalogue.db.type2.HstoreNomStatusCountTypeHandler"/>
        <result property="nameRelationsByTypeCount" column="name_relations_by_type_count" typeHandler="life.catalogue.db.type2.HstoreNameRelCountTypeHandler"/>
        <result property="verbatimByTypeCount" column="verbatim_by_type_count" typeHandler="life.catalogue.db.type2.HstoreTermCountTypeHandler"/>
        <result property="verbatimByTermCount" column="verbatim_by_term_count" typeHandler="life.catalogue.db.type2.NestedTermMapTypeHandler"/>
    </resultMap>

    <select id="get" resultMap="datasetImportResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE dataset_key=#{key} AND attempt=#{attempt}
    </select>

    <select id="count" resultType="integer">
        SELECT count(*)
        FROM <include refid="FROM" />
        <include refid="WHERE" />
    </select>

    <select id="list" resultMap="datasetImportResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        <include refid="WHERE" />
        ORDER BY started DESC, attempt DESC, dataset_key
        <include refid="life.catalogue.db.Common.limit" />
    </select>

    <select id="countDescription" resultType="integer">
        SELECT count(*) FROM description_${key}
    </select>
    <select id="countDistribution" resultType="integer">
        SELECT count(*) FROM distribution_${key}
    </select>
    <select id="countMedia" resultType="integer">
        SELECT count(*) FROM media_${key}
    </select>
    <select id="countName" resultType="integer">
        SELECT count(*) FROM name_${key}
    </select>
    <select id="countTypeMaterial" resultType="integer">
        SELECT count(*) FROM type_material_${key}
    </select>
    <select id="countReference" resultType="integer">
        SELECT count(*) FROM reference_${key}
    </select>
    <select id="countTaxon" resultType="integer">
        SELECT count(*) FROM name_usage_${key} WHERE NOT is_synonym
    </select>
    <select id="countSynonym" resultType="integer">
        SELECT count(*) FROM name_usage_${key} WHERE is_synonym
    </select>
    <select id="countVerbatim" resultType="integer">
        SELECT count(*) FROM verbatim_${key}
    </select>
    <select id="countVernacular" resultType="integer">
        SELECT count(*) FROM vernacular_name_${key}
    </select>

    <select id="countDistributionsByGazetteer" resultType="StringCount">
      SELECT gazetteer AS key, count(*) AS count
      FROM distribution_${key}
      GROUP BY gazetteer
    </select>
    <select id="countIssues" resultType="StringCount">
        SELECT iss AS key, count(*) AS count FROM (
         SELECT unnest(issues) iss from verbatim_${key}
        ) AS dis
        GROUP BY iss
    </select>
    <select id="countMediaByType" resultType="StringCount">
        SELECT type AS key, count(*) AS count
        FROM media_${key}
        GROUP BY type
    </select>
    <select id="countNamesByType" resultType="StringCount">
        SELECT type AS key, count(*) AS count
        FROM name_${key}
        GROUP BY type
    </select>
    <select id="countNameRelationsByType" resultType="StringCount">
        SELECT type AS key, count(*) AS count
        FROM name_rel_${key}
        GROUP BY type
    </select>
    <select id="countNamesByStatus" resultType="StringCount">
        SELECT nom_status AS key, count(*) AS count
        FROM name_${key}
        GROUP BY nom_status
    </select>
    <select id="countNamesByOrigin" resultType="StringCount">
        SELECT origin AS key, count(*) AS count
        FROM name_${key}
        GROUP BY origin
    </select>
    <select id="countNamesByRank" resultType="StringCount">
        SELECT rank AS key, count(*) AS count
        FROM name_${key}
        GROUP BY rank
    </select>
    <select id="countTypeMaterialByStatus" resultType="StringCount">
        SELECT status AS key, count(*) AS count
        FROM type_material_${key}
        GROUP BY status
    </select>
    <select id="countTaxaByRank" resultType="StringCount">
        SELECT n.rank AS key, count(*) AS count
        FROM name_usage_${key} t JOIN name_${key} n ON t.name_id=n.id
        WHERE NOT t.is_synonym
        GROUP BY n.rank
    </select>
    <select id="countUsagesByStatus" resultType="StringCount">
        SELECT status AS key, count(*) AS count
        FROM name_usage_${key}
        GROUP BY status
    </select>
    <select id="countVerbatimByType" resultType="StringCount">
        SELECT type AS key, count(*) AS count
        FROM verbatim_${key}
        GROUP BY type
    </select>
    <select id="countVerbatimTerms" resultType="StringCount">
        SELECT t AS key, count(*) AS count
        FROM verbatim_${key}, lateral jsonb_object_keys(terms) AS t
        WHERE type = #{rowType}
        GROUP BY t
    </select>
    <select id="countVernacularsByLanguage" resultType="StringCount">
        SELECT language AS key, count(*) AS count
        FROM vernacular_name_${key}
        GROUP BY language
    </select>

    <insert id="create" parameterType="DatasetImport">
        <selectKey keyProperty="imp.attempt" resultType="integer" order="BEFORE" >
            SELECT coalesce(max(attempt)+1, 1)
            FROM dataset_import
            WHERE dataset_key=#{imp.datasetKey}
        </selectKey>
        INSERT INTO dataset_import (<include refid="COLS" />, attempt)
          VALUES (<include refid="PROPS" />, #{imp.attempt})
    </insert>

    <update id="update" parameterType="DatasetImport">
        UPDATE dataset_import
        SET (<include refid="COLS" />) = (<include refid="PROPS" />)
        WHERE dataset_key=#{imp.datasetKey} AND attempt=#{imp.attempt}
    </update>

    <delete id="deleteByDataset" parameterType="map">
        DELETE FROM dataset_import
        WHERE dataset_key=#{datasetKey}
    </delete>
</mapper>
