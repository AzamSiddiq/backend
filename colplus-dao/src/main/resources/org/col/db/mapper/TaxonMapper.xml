<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.col.db.mapper.TaxonMapper">

    <sql id="taxonCols">
        ${alias}.id AS ${prefix}id,
        ${alias}.dataset_key AS ${prefix}dataset_key,
        ${alias}.sector_key AS ${prefix}sector_key,
        ${alias}.verbatim_key AS ${prefix}verbatim_key,
        ${alias}.parent_id AS ${prefix}parent_id,
        ${alias}.provisional AS ${prefix}provisional,
        ${alias}.origin AS ${prefix}origin,
        ${alias}.according_to AS ${prefix}according_to,
        ${alias}.according_to_date AS ${prefix}according_to_date,
        ${alias}.fossil AS ${prefix}fossil,
        ${alias}.recent AS ${prefix}recent,
        ${alias}.lifezones AS ${prefix}lifezones,
        ${alias}.webpage AS ${prefix}webpage,
        ${alias}.species_estimate AS ${prefix}species_estimate,
        ${alias}.species_estimate_reference_id AS ${prefix}species_estimate_reference_id,
        ${alias}.remarks AS ${prefix}remarks,
        ${alias}.created AS ${prefix}created,
        ${alias}.created_by AS ${prefix}created_by,
        ${alias}.modified AS ${prefix}modified,
        ${alias}.modified_by AS ${prefix}modified_by
    </sql>

    <sql id="SELECT">
        <include refid="taxonCols">
            <property name="alias" value="t"/>
            <property name="prefix" value=""/>
        </include>,
        <include refid="org.col.db.mapper.NameMapper.nameCols">
            <property name="alias" value="n"/>
            <property name="prefix" value="n_"/>
        </include>,
        (SELECT count(*) FROM taxon_${datasetKey} where parent_id=t.id) AS child_count
    </sql>

    <sql id="COLS">
        dataset_key,
        sector_key,
        verbatim_key,
        parent_id,
        name_id,
        provisional,
        origin,
        according_to,
        according_to_date,
        fossil,
        recent,
        lifezones,
        webpage,
        species_estimate,
        species_estimate_reference_id,
        remarks,
        created_by,
        modified_by
    </sql>

    <sql id="PROPS">
        #{datasetKey},
        #{sectorKey},
        #{verbatimKey},
        #{parentId},
        #{name.id},
        #{provisional},
        #{origin},
        #{accordingTo},
        #{accordingToDate},
        #{fossil},
        #{recent},
        #{lifezones, typeHandler=org.col.db.type.LifezoneSetTypeHandler},
        #{webpage, typeHandler=org.col.db.type.UriTypeHandler},
        #{speciesEstimate},
        #{speciesEstimateReferenceId},
        #{remarks},
        #{createdBy},
        #{modifiedBy}
    </sql>

    <sql id="FROM">
        taxon_${datasetKey} t JOIN name_${datasetKey} n ON t.name_id=n.id
    </sql>

    <!-- A mapping to Name, mostly auto mapped -->
    <resultMap id="taxonResultMap" type="Taxon" autoMapping="true">
        <id property="id" column="id" />
        <result property="lifezones" column="lifezones" typeHandler="org.col.db.type.LifezoneSetTypeHandler" />
        <association property="name" javaType="Name" resultMap="org.col.db.mapper.NameMapper.nameResultMap" columnPrefix="n_" />
    </resultMap>

    <resultMap id="taxonCountResultMap" type="TaxonCountMap" autoMapping="false">
        <id property="id" column="id" />
        <result property="count" column="dataset_sectors" />
    </resultMap>


    <select id="count" resultType="integer">
        <include refid="org.col.db.mapper.Common.countFromFinishedDatasetImport">
            <property name="column" value="taxon_count"/>
        </include>
    </select>

    <select id="countChildren" resultType="integer">
        SELECT count(*) FROM taxon_${datasetKey} where parent_id=#{id}
    </select>

    <select id="countRoot" resultType="integer">
        SELECT count(*)
        FROM taxon_${datasetKey}
        WHERE dataset_key = #{datasetKey} AND parent_id IS NULL
    </select>

    <select id="list" resultMap="taxonResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        ORDER BY id
        <include refid="org.col.db.mapper.Common.limit" />
    </select>

    <select id="listRoot" resultMap="taxonResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE t.parent_id IS NULL
        ORDER BY id
        <include refid="org.col.db.mapper.Common.limit" />
    </select>

    <select id="listByNameID" resultMap="taxonResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE t.dataset_key = #{datasetKey} AND t.name_id=#{nameId}
        ORDER BY id
    </select>

    <select id="listByName" resultMap="taxonResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE n.scientific_name=#{name}
        <if test="rank != null">
            AND n.rank=#{rank}::rank
        </if>
        ORDER BY id
    </select>

    <select id="children" resultMap="taxonResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE t.dataset_key = #{datasetKey}
            AND t.parent_id = #{id}
        ORDER BY n.rank, n.scientific_name
        <include refid="org.col.db.mapper.Common.limit" />
    </select>

    <select id="classification" resultMap="taxonResultMap">
        WITH RECURSIVE x AS(
            SELECT <include refid="SELECT" />
            FROM <include refid="FROM" />
            WHERE t.id = #{id}
        UNION
            SELECT <include refid="SELECT" />
            FROM <include refid="FROM" />, x
            WHERE t.id = x.parent_id
        )
        SELECT *
        FROM x
        WHERE x.id != #{id}
     </select>

    <select id="getCounts" resultMap="taxonCountResultMap">
        SELECT id, dataset_sectors
        FROM taxon_${datasetKey}
        WHERE id = #{id}
    </select>

    <select id="classificationCounts" resultMap="taxonCountResultMap">
        WITH RECURSIVE x AS(
            SELECT id, parent_id, dataset_sectors
            FROM taxon_${datasetKey} t
            WHERE t.id = #{id}
        UNION
            SELECT t.id, t.parent_id, t.dataset_sectors
            FROM taxon_${datasetKey} t, x
            WHERE t.id = x.parent_id
        )
        SELECT id, dataset_sectors
        FROM x
    </select>

    <select id="get" resultMap="taxonResultMap" flushCache="true">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE t.id = #{id}
    </select>

    <insert id="create" parameterType="Taxon" useGeneratedKeys="false" keyProperty="id">
        INSERT INTO taxon_${datasetKey}
                (id, <include refid="COLS" />, created, modified)
        VALUES (#{id}, <include refid="PROPS" />, now(), now())
    </insert>

    <update id="update" parameterType="Taxon" keyProperty="id">
        UPDATE taxon_${datasetKey}
        SET (<include refid="COLS" />, created, modified)
          = (<include refid="PROPS" />, now(), now())
        WHERE id = #{id}
    </update>

    <update id="updateParentId" parameterType="map">
        UPDATE taxon_${datasetKey}
        SET (parent_id, modified, modified_by)
        = (#{newParentId}, now(), #{user.key})
        WHERE parent_id = #{parentId}
    </update>

    <delete id="delete" parameterType="map">
        DELETE FROM taxon_${datasetKey} WHERE id = #{id}
    </delete>

    <select id="processTree" parameterType="map" resultMap="taxonResultMap" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
        WITH RECURSIVE x AS(
            SELECT <include refid="SELECT" />
                <if test="depthFirst">
                    ,concat_ws('|', n.scientific_name, t.id) AS path
                </if>
            FROM <include refid="FROM" />
            WHERE
            <choose>
                <when test="startID != null">
                    t.id = #{startID}
                </when>
                <otherwise>
                    t.parent_id IS NULL
                </otherwise>
            </choose>

            UNION

            SELECT <include refid="SELECT" />
                <if test="depthFirst">
                    ,concat_ws('|', x.path, n.scientific_name, t.id)  AS path
                </if>
            FROM <include refid="FROM" />
                JOIN x ON x.id = t.parent_id
            <where>
                <if test="exclusions != null and !exclusions.isEmpty()">
                    t.id NOT IN
                    <foreach item="id" collection="exclusions" open="(" separator="," close=")">#{id}</foreach>
                </if>
                <if test="sectorKey != null">
                    AND t.sector_key = #{sectorKey}
                </if>
            </where>

        )
        SELECT * FROM x
        <if test="depthFirst">
            ORDER BY x.path
        </if>
    </select>

    <select id="foreignChildren" resultMap="taxonResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
            JOIN taxon_3 p ON p.id=t.parent_id
        WHERE p.sector_key=#{sectorKey}
            AND t.sector_key!=#{sectorKey}
    </select>

    <delete id="deleteBySector" parameterType="map">
        DELETE FROM taxon_${datasetKey} WHERE sector_key = #{sectorKey}
    </delete>

    <update id="incDatasetSectorCount">
        WITH RECURSIVE x AS (
            SELECT t.id, t.parent_id
            FROM taxon_${datasetKey} t
            WHERE t.id = #{id}
        UNION
            SELECT t.id, t.parent_id
            FROM taxon_${datasetKey} t, x
            WHERE t.id = x.parent_id
        )

        UPDATE taxon_${datasetKey}
        SET dataset_sectors = jsonb_set( coalesce(dataset_sectors, '{}'), '{"${dkey}"}', to_jsonb( coalesce( (dataset_sectors->'${dkey}')::int, 0) + ${delta} ), true)
        WHERE id IN (SELECT id FROM x)
    </update>

    <update id="updateDatasetSectorCount">
        UPDATE taxon_${datasetKey}
        SET dataset_sectors = to_jsonb( #{count, typeHandler=org.col.db.type.FastutilIntIntHandler} )
        WHERE id = #{id}
    </update>

    <update id="resetDatasetSectorCount">
        UPDATE taxon_${datasetKey} AS t
        SET dataset_sectors = NULL
        FROM name n
        WHERE n.id=t.name_id
            AND n.rank &lt; 'genus'
    </update>

</mapper>
