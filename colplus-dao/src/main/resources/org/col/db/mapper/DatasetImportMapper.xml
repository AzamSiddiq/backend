<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.col.db.mapper.DatasetImportMapper">

    <sql id="SELECT">
      dataset_key,
      attempt,
      state,
      error,
      started,
      finished,
      download_uri,
      download,
      verbatim_count,
      name_count,
      taxon_count,
      reference_count,
      vernacular_count,
      distribution_count,
      issues_count,
      names_by_rank_count,
      names_by_type_count,
      vernaculars_by_language_count,
      distributions_by_gazetteer_count,
      names_by_origin_count,
      usages_by_status_count,
      names_by_status_count,
      name_relations_by_type_count,
      verbatim_by_type_count
    </sql>

    <sql id="COLS">
      dataset_key,
      state,
      error,
      started,
      finished,
      download_uri,
      download,
      verbatim_count,
      name_count,
      taxon_count,
      reference_count,
      vernacular_count,
      distribution_count,
      issues_count,
      names_by_rank_count,
      names_by_type_count,
      vernaculars_by_language_count,
      distributions_by_gazetteer_count,
      names_by_origin_count,
      usages_by_status_count,
      names_by_status_count,
      name_relations_by_type_count,
      verbatim_by_type_count
    </sql>

    <sql id="PROPS">
      #{di.datasetKey},
      #{di.state},
      #{di.error},
      #{di.started},
      #{di.finished},
      #{di.downloadUri},
      #{di.download},
      #{di.verbatimCount},
      #{di.nameCount},
      #{di.taxonCount},
      #{di.referenceCount},
      #{di.vernacularCount},
      #{di.distributionCount},
      #{di.issuesCount, typeHandler=org.col.db.type2.HstoreIssueCountTypeHandler}::hstore,
      #{di.namesByRankCount, typeHandler=org.col.db.type2.HstoreRankCountTypeHandler}::hstore,
      #{di.namesByTypeCount, typeHandler=org.col.db.type2.HstoreNameTypeCountTypeHandler}::hstore,
      #{di.vernacularsByLanguageCount, typeHandler=org.col.db.type2.HstoreLanguageCountTypeHandler}::hstore,
      #{di.distributionsByGazetteerCount, typeHandler=org.col.db.type2.HstoreGazetteerCountTypeHandler}::hstore,
      #{di.namesByOriginCount, typeHandler=org.col.db.type2.HstoreOriginCountTypeHandler}::hstore,
      #{di.usagesByStatusCount, typeHandler=org.col.db.type2.HstoreTaxStatusCountTypeHandler}::hstore,
      #{di.namesByStatusCount, typeHandler=org.col.db.type2.HstoreNomStatusCountTypeHandler}::hstore,
      #{di.nameRelationsByTypeCount, typeHandler=org.col.db.type2.HstoreNameRelCountTypeHandler}::hstore,
      #{di.verbatimByTypeCount, typeHandler=org.col.db.type2.HstoreTermCountTypeHandler}::hstore
    </sql>

    <sql id="FROM">
      dataset_import
    </sql>

    <!--  A mapping to Name, mostly auto mapped -->
    <resultMap id="datasetImportResultMap" type="DatasetImport" autoMapping="true">
        <result property="issuesCount" column="issues_count" typeHandler="org.col.db.type2.HstoreIssueCountTypeHandler"/>
        <result property="namesByRankCount" column="names_by_rank_count" typeHandler="org.col.db.type2.HstoreRankCountTypeHandler"/>
        <result property="namesByTypeCount" column="names_by_type_count" typeHandler="org.col.db.type2.HstoreNameTypeCountTypeHandler"/>
        <result property="vernacularsByLanguageCount" column="vernaculars_by_language_count" typeHandler="org.col.db.type2.HstoreLanguageCountTypeHandler"/>
        <result property="distributionsByGazetteerCount" column="distributions_by_gazetteer_count" typeHandler="org.col.db.type2.HstoreGazetteerCountTypeHandler"/>
        <result property="namesByOriginCount" column="names_by_origin_count" typeHandler="org.col.db.type2.HstoreOriginCountTypeHandler"/>
        <result property="usagesByStatusCount" column="usages_by_status_count" typeHandler="org.col.db.type2.HstoreTaxStatusCountTypeHandler"/>
        <result property="namesByStatusCount" column="names_by_status_count" typeHandler="org.col.db.type2.HstoreNomStatusCountTypeHandler"/>
        <result property="nameRelationsByTypeCount" column="name_relations_by_type_count" typeHandler="org.col.db.type2.HstoreNameRelCountTypeHandler"/>
        <result property="verbatimByTypeCount" column="verbatim_by_type_count" typeHandler="org.col.db.type2.HstoreTermCountTypeHandler"/>
    </resultMap>

    <select id="count" resultType="integer">
        SELECT count(*)
        FROM <include refid="FROM" />
        <if test="state != null">
            WHERE state = #{state}
        </if>
    </select>

    <select id="last" resultMap="datasetImportResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE dataset_key = #{key}
        ORDER BY attempt DESC
        LIMIT 1
    </select>

    <select id="lastSuccessful" resultMap="datasetImportResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE dataset_key = #{key} AND state = 4
        ORDER BY attempt DESC
        LIMIT 1
    </select>

    <select id="list" resultMap="datasetImportResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        <if test="state != null">
          WHERE state = #{state}
        </if>
        ORDER BY started DESC
        <include refid="org.col.db.mapper.Common.limit" />
    </select>

    <select id="listByDataset" resultMap="datasetImportResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE dataset_key = #{key}
        ORDER BY attempt DESC
    </select>

    <select id="metrics" resultMap="datasetImportResultMap">
        SELECT #{key} AS datasetKey,
        (SELECT count(*) FROM verbatim WHERE dataset_key=#{key}) AS verbatimCount,
        (SELECT count(*) FROM name WHERE dataset_key=#{key}) AS nameCount,
        (SELECT count(*) FROM taxon WHERE dataset_key=#{key}) AS taxonCount,
        (SELECT count(*) FROM reference WHERE dataset_key=#{key}) AS referenceCount,
        (SELECT count(*) FROM vernacular_name WHERE dataset_key=#{key}) AS vernacularCount,
        (SELECT count(*) FROM distribution WHERE dataset_key=#{key}) AS distributionCount,

        (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
            (SELECT iss AS key, count(*)::text AS cnt FROM (
              SELECT unnest(issues) iss from name WHERE dataset_key=#{key}
              ) AS dis GROUP BY key
            ) AS issues
        ) AS issues_count,

        (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
          (SELECT rank AS key, count(*)::text AS cnt FROM name
           WHERE dataset_key=#{key}
           GROUP BY rank
           ) AS ranks
        ) AS names_by_rank_count,

        (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
          (SELECT type AS key, count(*)::text AS cnt FROM name
           WHERE dataset_key=#{key}
           GROUP BY type
           ) AS types
        ) AS names_by_type_count,

        (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
          (SELECT language AS key, count(*)::text AS cnt
           FROM vernacular_name
           WHERE dataset_key=#{key}
           GROUP BY language
           ) AS languages
        ) AS vernaculars_by_language_count,

        (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
          (SELECT gazetteer AS key, count(*)::text AS cnt
           FROM distribution
           WHERE dataset_key=#{key}
           GROUP BY gazetteer
           ) AS gazetteers
        ) AS distributions_by_gazetteer_count,

        (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
          (SELECT origin AS key, count(*)::text AS cnt
           FROM name
           WHERE dataset_key=#{key}
           GROUP BY origin
           ) AS origins
        ) AS names_by_origin_count,

        (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
            (SELECT CASE WHEN doubtful THEN 1 ELSE 0 END AS key, count(*)::text AS cnt
                FROM taxon
                WHERE dataset_key=#{key}
                GROUP BY doubtful
            UNION
            SELECT status AS key, count(*)::text AS cnt
                FROM synonym
                WHERE dataset_key=#{key}
                GROUP BY status
            ) AS taxstatus
        ) AS usages_by_status_count,

        (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
            (SELECT nom_status AS key, count(*)::text AS cnt
            FROM name
            WHERE dataset_key=#{key}
            GROUP BY nom_status
            ) AS nom_status
        ) AS names_by_status_count,

        (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
            (SELECT type AS key, count(*)::text AS cnt
            FROM name_rel
            WHERE dataset_key=#{key}
            GROUP BY type
            ) AS reltypes
        ) AS name_relations_by_type_count,

        (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
            (SELECT type AS key, count(*)::text AS cnt
            FROM verbatim
            WHERE dataset_key=#{key}
            GROUP BY type
            ) AS vtypes
        ) AS verbatim_by_type_count
    </select>

    <insert id="create" parameterType="DatasetImport">
        <selectKey keyProperty="di.attempt" resultType="integer" order="BEFORE" >
            SELECT coalesce(max(attempt)+1, 1)
            FROM dataset_import
            WHERE dataset_key=#{di.datasetKey}
        </selectKey>
        INSERT INTO dataset_import (<include refid="COLS" />, attempt)
          VALUES (<include refid="PROPS" />, #{di.attempt})
    </insert>

    <update id="update" parameterType="DatasetImport">
        UPDATE dataset_import
        SET (<include refid="COLS" />) = (<include refid="PROPS" />)
        WHERE dataset_key=#{di.datasetKey} AND attempt=#{di.attempt}
    </update>

</mapper>
