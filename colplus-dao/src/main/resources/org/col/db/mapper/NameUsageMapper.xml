<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.col.db.mapper.NameUsageMapper">

    <!--
        We use an artificial discriminator to select the corresponding result mapper
        1=Synonym
        2=Taxon
        3=BareName
    -->
    <sql id="SELECT">
        CASE
            WHEN t.key = s.taxon_key THEN 1
            WHEN t.key is not null THEN 2
            ELSE 3
        END AS disc,
        <include refid="org.col.db.mapper.NameMapper.nameCols">
            <property name="alias" value="n"/>
            <property name="prefix" value="n_"/>
        </include>,
        <include refid="org.col.db.mapper.TaxonMapper.taxonCols">
            <property name="alias" value="t"/>
            <property name="prefix" value=""/>
        </include>,
        <include refid="org.col.db.mapper.SynonymMapper.synCols">
            <property name="alias" value="s"/>
            <property name="prefix" value="s_"/>
        </include>,
        <include refid="org.col.db.mapper.TaxonMapper.taxonCols">
            <property name="alias" value="t"/>
            <property name="prefix" value="a_"/>
        </include>,
        <include refid="org.col.db.mapper.NameMapper.nameCols">
            <property name="alias" value="an"/>
            <property name="prefix" value="a_n_"/>
        </include>
    </sql>

    <sql id="FROM">
        name n
        LEFT JOIN synonym s ON n.key = s.name_key
        LEFT JOIN taxon t ON n.key = t.name_key OR s.taxon_key = t.key
    </sql>

    <sql id="FROM-FULL">
        <include refid="FROM"/>
        LEFT JOIN name an ON t.name_key = an.key
    </sql>

    <sql id="WHERE">
        <where>
            <if test="q.q != null">
                n.doc @@ plainto_tsquery('simple2', #{q.q})
            </if>
            <if test="q.datasetKey != null">
                AND #{q.datasetKey} = n.dataset_key
            </if>
            <if test="q.key != null">
                AND #{q.key} = n.key
            </if>
            <if test="q.rank != null">
                AND #{q.rank}::rank = n.rank
            </if>
            <if test="q.nomStatus != null">
                AND #{q.nomStatus}::int = n.nom_status
            </if>
            <if test="q.type != null">
                AND #{q.type}::int = n.type
            </if>
            <if test="q.hasField != null">
                AND ${q.hasField.notNull('n')}
            </if>
            <if test="q.issue != null">
                AND n.issues @> array[#{q.issue}::int]
            </if>
            <if test="q.status != null">
                <choose>
                    <when test='q.status.name() == "ACCEPTED"'>
                        AND t.key is not null
                        AND (s.taxon_key is null OR s.taxon_key != t.key)
                        AND NOT t.doubtful
                    </when>
                    <when test="q.status.name() == 'DOUBTFUL'">
                        AND t.key is not null
                        AND (s.taxon_key is null OR s.taxon_key != t.key)
                        AND t.doubtful
                    </when>
                    <when test="q.status.name() == 'SYNONYM'">
                        AND t.key = s.taxon_key
                        AND s.status = #{q.status}::int
                    </when>
                    <when test="q.status.name() == 'AMBIGUOUS_SYNONYM'">
                        AND t.key = s.taxon_key
                        AND s.status = #{q.status}::int
                    </when>
                    <when test="q.status.name() == 'MISAPPLIED'">
                        AND t.key = s.taxon_key
                        AND s.status = #{q.status}::int
                    </when>
                </choose>
            </if>
        </where>
    </sql>



    <resultMap id="taxonResultMap" type="Taxon" autoMapping="true" extends="org.col.db.mapper.TaxonMapper.taxonResultMap">
    </resultMap>

    <resultMap id="synonymResultMap" type="Synonym" autoMapping="true" extends="org.col.db.mapper.SynonymMapper.synonymResultMap">
        <id column="n_key" />
        <id column="a_key" />
        <result property="accordingTo" column="s_according_to" />
        <result property="status" column="s_status" />
    </resultMap>

    <resultMap id="bareNameResultMap" type="BareName" autoMapping="true">
        <id column="n_key" />
        <association property="name" javaType="Name" resultMap="org.col.db.mapper.NameMapper.nameResultMap" columnPrefix="n_" />
    </resultMap>

    <resultMap id="nameSearchResultMap" type="Object">
        <discriminator javaType="int" column="disc">
            <case value="1" resultType="Synonym" resultMap="synonymResultMap" />
            <case value="2" resultType="Taxon" resultMap="taxonResultMap" />
            <case value="3" resultType="BareName" resultMap="bareNameResultMap" />
        </discriminator>
    </resultMap>


    <select id="searchCount" resultType="integer">
        SELECT COUNT(*)
        FROM <include refid="FROM" />
        <include refid="WHERE" />
    </select>

    <select id="search" resultMap="nameSearchResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM-FULL" />
        <include refid="WHERE" />
        <choose>
            <when test="q.sortBy.toString() == 'KEY'">
                ORDER BY n.key, disc
            </when>
            <when test="q.sortBy.toString() == 'NAME'">
                ORDER BY n.scientific_name ASC, disc
            </when>
            <otherwise>
                ORDER BY ts_rank(n.doc, plainto_tsquery('simple2', #{q.q})) DESC
            </otherwise>
        </choose>
        <include refid="org.col.db.mapper.Common.limit" />
    </select>

    <select id="listByName" resultMap="nameSearchResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM-FULL" />
        WHERE n.key=#{nameKey}
    </select>

</mapper>
