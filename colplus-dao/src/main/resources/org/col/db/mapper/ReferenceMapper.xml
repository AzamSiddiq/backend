<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.col.db.mapper.ReferenceMapper">

    <sql id="SELECT">
        r.id,
        r.dataset_key,
        r.sector_key,
        r.verbatim_key,
        r.csl,
        r.citation,
        r.year,
        r.created,
        r.created_by,
        r.modified,
        r.modified_by
    </sql>

    <sql id="COLS">
        id,
        dataset_key,
        sector_key,
        verbatim_key,
        csl,
        citation,
        year,
        created_by,
        modified_by
    </sql>

    <sql id="PROPS">
        #{id},
        #{datasetKey},
        #{sectorKey},
        #{verbatimKey},
        #{csl, typeHandler=org.col.db.type.CslJsonHandler}::jsonb,
        #{citation},
        #{year},
        #{createdBy},
        #{modifiedBy}
    </sql>

    <sql id="FROM">
        reference_${datasetKey} r
    </sql>

    <sql id="SEARCH_WHERE">
        <if test="req != null">
            <where>
                <if test="req.q != null">
                    r.doc @@ plainto_tsquery('simple2', #{req.q})
                </if>
                <if test="req.year != null">
                    AND r.year=#{req.year}
                </if>
                <if test="req.sectorKey != null">
                    AND
                    <choose>
                        <when test="req.getSectorKeyInt() != null">r.sector_key = #{req.getSectorKeyInt()}</when>
                        <when test="req.getSectorKeyIsNull()">r.sector_key IS NULL</when>
                        <otherwise>r.sector_key IS NOT NULL</otherwise>
                    </choose>
                </if>
            </where>
        </if>
    </sql>

    <!-- A mapping to Reference, mostly auto mapped -->
    <resultMap id="referenceResultMap" type="Reference" autoMapping="true">
        <id property="id" column="id" />
        <result property="year" column="year" />
        <result property="csl" column="csl" typeHandler="org.col.db.type.CslJsonHandler" />
    </resultMap>

    <select id="count" resultType="integer">
        <if test="datasetKey &lt; 10">
            SELECT count(*) FROM reference_${datasetKey}
        </if>
        <if test="datasetKey &gt;= 10">
            <include refid="org.col.db.mapper.Common.countFromFinishedDatasetImport">
                <property name="column" value="reference_count"/>
            </include>
        </if>
    </select>

    <select id="hasData" resultType="boolean">
        SELECT exists(
        SELECT id FROM <include refid="FROM" /> LIMIT 1
        )
    </select>

    <select id="list" resultMap="referenceResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        ORDER BY id
        <include refid="org.col.db.mapper.Common.limit" />
    </select>

    <select id="listByIds" resultMap="referenceResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE id IN
        <foreach item="k" index="idx" collection="ids"
                 open="(" separator="," close=")">
            #{k}
        </foreach>
    </select>

    <select id="find" resultMap="referenceResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE r.citation=#{citation}
        <if test="sectorKey != null">
            AND r.sector_key=#{sectorKey}
        </if>
    </select>

    <select id="search" resultMap="referenceResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        <include refid="SEARCH_WHERE" />
        ORDER BY
        <choose>
            <when test="req == null || req.sortBy == null">
                r.id
            </when>
            <otherwise>
                <bind name="sortBy" value="req.sortBy.name()" />
                <choose>
                    <when test="sortBy == 'RELEVANCE'">
                        ts_rank_cd(doc, plainto_tsquery('simple2', #{req.q}))
                    </when>
                    <when test="sortBy == 'YEAR'">
                        r.year DESC NULLs LAST, r.id
                    </when>
                    <otherwise>
                        r.id
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
        <include refid="org.col.db.mapper.Common.limit"/>
    </select>

    <select id="searchCount" resultType="integer">
        SELECT COUNT(*)
        FROM <include refid="FROM" />
        <include refid="SEARCH_WHERE" />
    </select>

    <select id="get" resultMap="referenceResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE r.id = #{id}
    </select>

    <insert id="create" parameterType="Reference" useGeneratedKeys="true" keyProperty="key">
        INSERT INTO reference_${datasetKey} ( <include refid="COLS" />, created, modified)
        VALUES ( <include refid="PROPS" />, now(), now())
    </insert>

    <insert id="linkToTaxon">
        INSERT INTO usage_reference_${datasetKey} (dataset_key, taxon_id, reference_id)
        VALUES ( #{datasetKey}, #{taxonId}, #{referenceId} )
    </insert>

    <select id="listByTaxon" resultType="string">
        SELECT reference_id
        FROM usage_reference
        WHERE dataset_key = #{datasetKey}
            AND taxon_id = #{taxonId}
    </select>

    <delete id="deleteBySector" parameterType="map">
        DELETE FROM reference_${datasetKey}
        WHERE sector_key=#{sectorKey}
    </delete>

</mapper>
