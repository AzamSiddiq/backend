<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.col.db.mapper.VerbatimRecordMapper">

    <sql id="SELECT">
        v.key,
        v.dataset_key,
        v.line,
        v.file,
        v.type,
        v.terms,
        v.issues
    </sql>

    <sql id="COLS">
        dataset_key,
        line,
        file,
        type,
        terms,
        issues
    </sql>

    <sql id="PROPS">
        #{datasetKey},
        #{line},
        #{file},
        #{type},
        #{terms, typeHandler=org.col.db.type2.TermMapTypeHandler}::jsonb,
        #{issues, typeHandler=org.col.db.type2.IssueSetTypeHandler}::int[]
    </sql>

    <sql id="FROM">
        verbatim_${datasetKey} v
    </sql>

    <sql id="WHERE">
        <where>
            <if test="type != null">
                v.type = #{type, typeHandler=org.col.db.type.TermTypeHandler}
            </if>
            <if test="terms != null">
                AND v.terms @>
                <foreach item="val" index="term" collection="terms" open="'{" separator="," close="}'">
                    "${term}": "${val}"
                </foreach>
            </if>
            <if test="issues != null">
                AND v.issues @>
                <foreach item="issue" index="index" collection="issues" open="array[" separator="," close="]">${issue.ordinal()}</foreach>
            </if>
        </where>
    </sql>

    <resultMap id="verbatimResultMap" type="VerbatimRecord" autoMapping="true">
        <result property="terms" column="terms" typeHandler="org.col.db.type2.TermMapTypeHandler"/>
        <result property="issues" column="issues" typeHandler="org.col.db.type2.IssueSetTypeHandler" />
    </resultMap>

    <select id="count" resultType="integer">
        SELECT coalesce(
        (SELECT
        <choose>
            <when test="terms != null or issues != null">
                count(*)
                FROM <include refid="FROM" />
                <include refid="WHERE" />
            </when>
            <otherwise>
                <choose>
                    <when test="type != null">
                        (verbatim_by_type_count->#{type, typeHandler=org.col.db.type.TermTypeHandler})::int
                    </when>
                    <otherwise>
                        verbatim_count
                    </otherwise>
                </choose>
                <include refid="org.col.db.mapper.Common.fromFinishedDatasetImport"/>
            </otherwise>
        </choose>
        ), 0)
    </select>

    <select id="list" resultMap="verbatimResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        <include refid="WHERE" />
        ORDER BY key
        <include refid="org.col.db.mapper.Common.limit"/>
    </select>

    <select id="get" resultMap="verbatimResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE dataset_key = #{datasetKey} AND key = #{key}
    </select>

    <insert id="create" parameterType="VerbatimRecord" useGeneratedKeys="true" keyProperty="key">
        INSERT INTO verbatim_${datasetKey} (<include refid="COLS" />)
        VALUES (<include refid="PROPS" />)
    </insert>

</mapper>
