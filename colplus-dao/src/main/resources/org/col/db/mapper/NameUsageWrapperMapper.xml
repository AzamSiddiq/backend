<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.col.db.mapper.NameUsageWrapperMapper">

    <resultMap id="issueResultMap" type="NameUsageWrapper" autoMapping="true">
        <result property="issues" column="issues" typeHandler="org.col.db.type2.IssueSetTypeHandler" />
    </resultMap>


    <resultMap id="usageResultMap" type="NameUsageWrapper" autoMapping="true" extends="issueResultMap">
        <id column="uid" />
        <association property="usage">
            <discriminator column="is_synonym" javaType="boolean">
                <case value="false" resultType="Taxon"   resultMap="org.col.db.mapper.TaxonMapper.taxonResultMap"/>
                <case value="true"  resultType="Synonym" resultMap="org.col.db.mapper.SynonymMapper.synonymResultMap"/>
            </discriminator>
        </association>
        <collection property="vernacularNames" ofType="VernacularName" autoMapping="true" notNullColumn="v_id">
            <id property="id" column="v_id"/>
        </collection>
    </resultMap>

    <resultMap id="taxonWithClassificationResultMap" type="NameUsageWrapper" autoMapping="true" extends="usageResultMap">
        <id property="id" column="uid" />
        <result property="classification" column="classification" typeHandler="org.col.db.type2.SimpleNameArrayTypeHandler" />
    </resultMap>

    <resultMap id="classificationResultMap" type="SimpleNameClassification">
        <id property="id" column="uid"/>
        <result property="classification" column="classification" typeHandler="org.col.db.type2.SimpleNameArrayTypeHandler" />
    </resultMap>

    <resultMap id="taxonGetClassificationResultMap" type="NameUsageWrapper" autoMapping="true" extends="usageResultMap">
        <collection property="classification" ofType="SimpleName" column="{key.id=id,key.datasetKey=dataset_key}" autoMapping="true"
                    select="org.col.db.mapper.TaxonMapper.classificationSimple"/>
    </resultMap>

    <resultMap id="bareNameResultMap" type="NameUsageWrapper" autoMapping="true" extends="issueResultMap">
        <id column="n_id"/>
        <association property="usage" javaType="BareName">
            <id column="n_id" />
            <association property="name" javaType="Name" resultMap="org.col.db.mapper.NameMapper.nameResultMap" columnPrefix="n_" />
        </association>
    </resultMap>


    <sql id="selectClassificationAppend">
        u.id,
        array_append(tree.classification, (u.id,n.rank,n.scientific_name)::simple_name)
    </sql>

    <sql id="fromNameUsage">
        FROM name_usage_${datasetKey} u JOIN name_${datasetKey} n ON u.name_id=n.id
    </sql>

    <sql id="taxonSelectFrom">
        <include refid="org.col.db.mapper.NameUsageMapper.SELECT" />,
        vbn.issues || vbt.issues AS issues,
        ed.key AS decisionKey,
        vn.id as v_id, vn.name, vn.latin, vn.language
    FROM <include refid="org.col.db.mapper.NameUsageMapper.FROM"/>
        LEFT JOIN verbatim_${partition} vbt ON vbt.id=u.verbatim_key
        LEFT JOIN verbatim_${partition} vbn ON vbn.id=n.verbatim_key
        LEFT JOIN vernacular_name_${partition} vn ON vn.taxon_id=u.id
        LEFT JOIN decision ed ON ed.dataset_key=#{datasetKey} AND ed.subject_id=u.id
    </sql>

    <select id="processSectorUsages" parameterType="map" resultMap="taxonWithClassificationResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
        <include refid="org.col.db.Common.partitionByDatasetKey"/>
        WITH RECURSIVE tree AS(
            SELECT u.id AS uid, classification_sn(#{datasetKey}, u.id, true) AS classification,
            <include refid="taxonSelectFrom" />
            WHERE u.id = #{usageId}
        UNION ALL
            SELECT
            <include refid="selectClassificationAppend"/>,
            <include refid="taxonSelectFrom" />
            JOIN tree ON (tree.uid = u.parent_id)
            WHERE u.sector_key = #{sectorKey}
        )
        SELECT * FROM tree
    </select>

    <select id="processTreeUsages" parameterType="map" resultMap="taxonWithClassificationResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
        <include refid="org.col.db.Common.partitionByDatasetKey"/>
        WITH RECURSIVE tree AS(
        SELECT u.id AS uid, classification_sn(#{datasetKey}, u.id, true) AS classification,
        <include refid="taxonSelectFrom" />
        WHERE u.id=#{usageId} AND NOT u.is_synonym
        UNION ALL
        SELECT
        <include refid="selectClassificationAppend"/>,
        <include refid="taxonSelectFrom" />
        JOIN tree ON (tree.uid = u.parent_id)
        )
        SELECT * FROM tree
    </select>

    <select id="processTree" parameterType="map" resultMap="classificationResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
        <include refid="org.col.db.Common.partitionByDatasetKey"/>
        WITH RECURSIVE tree AS(
            SELECT #{usageId} AS uid, classification_sn(#{datasetKey}, #{usageId}, true) AS classification
        UNION ALL
            SELECT
                <include refid="selectClassificationAppend"/>
            <include refid="fromNameUsage"/>
                JOIN tree ON (tree.uid = u.parent_id)
	   )
       SELECT * FROM tree
    </select>

    <select id="processDatasetBareNames" parameterType="map" resultMap="bareNameResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
        <include refid="org.col.db.Common.partitionByDatasetKey"/>
        SELECT v.issues,
        <include refid="org.col.db.mapper.NameMapper.nameCols">
            <property name="alias" value="n"/>
            <property name="prefix" value="n_"/>
        </include>
        FROM name_${partition} n
            LEFT JOIN name_usage_${partition}  u ON n.id = u.name_id
            LEFT JOIN verbatim_${partition} v ON v.id= n.verbatim_key
        WHERE u.id IS NULL
        <if test="sectorKey != null">
        	AND n.sector_key = #{sectorKey}
   	    </if>
    </select>

    <select id="get" parameterType="map" resultMap="taxonGetClassificationResultMap">
        <include refid="org.col.db.Common.partitionByDatasetKey"/>
        SELECT <include refid="taxonSelectFrom" />
        WHERE u.id = #{id}
    </select>

    <select id="getWithoutClassification" parameterType="map" resultMap="taxonWithClassificationResultMap">
        <include refid="org.col.db.Common.partitionByDatasetKey"/>
        SELECT NULL AS classification, <include refid="taxonSelectFrom" />
        WHERE u.id = #{id}
    </select>



    <select id="search" parameterType="map" resultMap="taxonWithClassificationResultMap">
        <include refid="org.col.db.Common.partitionByDatasetKey"/>
    </select>

</mapper>
