<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.col.db.mapper.DatasetMapper">

    <sql id="SELECT">
      key,
      type,
      title,
      gbif_key,
      gbif_publisher_key,
      description,
      organisation,
      contact_person,
      authors_and_editors,
      license,
      version,
      release_date,
      homepage,
      data_format,
      data_access,
      import_frequency,
      code,
      notes,
      created,
      modified,
      deleted
    </sql>

    <sql id="COLS">
      type,
      title,
      gbif_key,
      gbif_publisher_key,
      description,
      organisation,
      contact_person,
      authors_and_editors,
      license,
      version,
      release_date,
      homepage,
      data_format,
      data_access,
      import_frequency,
      code,
      notes
    </sql>

    <sql id="PROPS">
      #{type},
      #{title},
      #{gbifKey},
      #{gbifPublisherKey},
      #{description},
      #{organisation},
      #{contactPerson},
      #{authorsAndEditors, typeHandler=org.col.db.type.StringArrayTypeHandler},
      #{license},
      #{version},
      #{releaseDate},
      #{homepage},
      #{dataFormat},
      #{dataAccess},
      #{importFrequency},
      #{code},
      #{notes}
    </sql>

    <sql id="FROM">
        dataset
    </sql>

    <sql id="SEARCH_WHERE">
        deleted IS NULL
        <if test="q != null">
            AND doc @@ plainto_tsquery('simple2', #{q})
        </if>
    </sql>

    <!--  A mapping to Name, mostly auto mapped -->
    <resultMap id="datasetResultMap" type="Dataset" autoMapping="true">
        <id property="key" column="key" />
        <result property="authorsAndEditors" column="authors_and_editors" typeHandler="org.col.db.type.StringArrayTypeHandler" />
    </resultMap>

    <select id="count" parameterType="map" resultType="Integer">
        SELECT COUNT(*)
        FROM <include refid="FROM" />
        WHERE <include refid="SEARCH_WHERE" />
    </select>

    <select id="list" parameterType="map" resultMap="datasetResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE deleted IS NULL
        ORDER BY key
        <include refid="org.col.db.mapper.Common.limit"/>
    </select>

    <select id="listNeverImported" parameterType="map" resultMap="datasetResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" /> d
          LEFT JOIN dataset_import di ON di.dataset_key=d.key
        WHERE d.deleted IS NULL
          AND di.attempt IS NULL
        ORDER BY d.key ASC
        LIMIT #{limit}
    </select>

    <select id="listToBeImported" parameterType="map" resultMap="datasetResultMap">
        SELECT *
        FROM (
            SELECT DISTINCT ON (d.key) di.state, di.finished, <include refid="SELECT" />
            FROM <include refid="FROM" /> d
              LEFT JOIN dataset_import di ON di.dataset_key=d.key
            WHERE d.deleted IS NULL AND di.finished IS NOT NULL
            ORDER BY d.key, di.attempt DESC
        ) AS latest
        WHERE state != 0 AND finished + interval '1 week' &lt;  now()
        ORDER BY finished ASC
        LIMIT #{limit}
    </select>

    <select id="search" parameterType="map" resultMap="datasetResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE <include refid="SEARCH_WHERE" />
        <choose>
            <when test="q == null">
                ORDER BY key
            </when>
            <otherwise>
                ORDER BY ts_rank_cd(doc, plainto_tsquery('simple2', #{q})) DESC
            </otherwise>
        </choose>
        <include refid="org.col.db.mapper.Common.limit"/>
    </select>

    <select id="get" parameterType="map" resultMap="datasetResultMap">
      SELECT <include refid="SELECT" />
      FROM <include refid="FROM" />
      WHERE key = #{key}
    </select>

    <select id="getByGBIF" parameterType="map" resultMap="datasetResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE gbif_key = #{key}
    </select>

    <insert id="create" parameterType="Dataset" useGeneratedKeys="true" keyProperty="key">
      INSERT INTO dataset (<include refid="COLS" />, created)
             VALUES (<include refid="PROPS" />, now())
    </insert>

    <update id="update" parameterType="Dataset">
        UPDATE dataset
        SET (<include refid="COLS" />, modified) = (<include refid="PROPS" />, now())
        WHERE key = #{key}
    </update>

    <update id="delete" parameterType="map">
        UPDATE dataset SET deleted = now()
        WHERE key = #{key}
    </update>

    <delete id="truncateDatasetData" parameterType="map">
        DELETE FROM verbatim_record
        WHERE dataset_key = #{key};

        DELETE FROM distribution_reference
        WHERE dataset_key = #{key};

        DELETE FROM distribution
        WHERE dataset_key = #{key};

        DELETE FROM vernacular_name_reference
        WHERE dataset_key = #{key};

        DELETE FROM vernacular_name
        WHERE dataset_key = #{key};

        DELETE FROM synonym
        WHERE dataset_key = #{key};

        DELETE FROM taxon_reference
        WHERE dataset_key = #{key};

        DELETE FROM taxon
        WHERE dataset_key = #{key};

        DELETE FROM name_act
        WHERE dataset_key = #{key};

        DELETE FROM name
        WHERE dataset_key = #{key};

        DELETE FROM reference
        WHERE dataset_key = #{key};

        DELETE FROM serial
        WHERE dataset_key = #{key};
    </delete>

</mapper>
