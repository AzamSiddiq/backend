<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.col.db.mapper.DatasetMapper">

    <sql id="SELECT">
      key,
      type,
      title,
      gbif_key,
      gbif_publisher_key,
      description,
      organisation,
      contact_person,
      authors_and_editors,
      license,
      version,
      released,
      homepage,
      logo,
      data_format,
      data_access,
      cluster,
      origin,
      import_frequency,
      code,
      notes,
      catalogue,
      created,
      deleted,
      di.finished AS modified,
      di.verbatim_count AS size
    </sql>

    <sql id="COLS">
      type,
      title,
      gbif_key,
      gbif_publisher_key,
      description,
      organisation,
      contact_person,
      authors_and_editors,
      license,
      version,
      released,
      homepage,
      logo,
      data_format,
      data_access,
      cluster,
      origin,
      import_frequency,
      code,
      notes,
      catalogue
    </sql>

    <sql id="PROPS">
      #{type},
      #{title},
      #{gbifKey},
      #{gbifPublisherKey},
      #{description},
      #{organisation},
      #{contactPerson},
      #{authorsAndEditors, typeHandler=org.col.db.type.StringArrayTypeHandler},
      #{license},
      #{version},
      #{released},
      #{homepage},
      #{logo},
      #{dataFormat},
      #{dataAccess},
      #{cluster},
      #{origin},
      #{importFrequency, typeHandler=org.col.db.type.FrequencyTypeHandler},
      #{code},
      #{notes},
      #{catalogue}
    </sql>

    <sql id="FROM">
        dataset d LEFT JOIN dataset_import di ON d.last_data_import_attempt=di.attempt AND d.key=di.dataset_key
    </sql>

    <sql id="SEARCH_WHERE">
        deleted IS NULL
        <if test="req != null">
            <if test="req.q != null">
                AND doc @@ plainto_tsquery('simple2', #{req.q})
            </if>
            <if test="req.code != null">
                AND code=#{req.code}
            </if>
            <if test="req.catalogue != null">
                AND catalogue &lt;= #{req.catalogue}
            </if>
            <if test="req.format != null">
                AND data_format=#{req.format}
            </if>
            <if test="req.type != null">
                AND type=#{req.type}
            </if>
        </if>
    </sql>

    <!--  A mapping to Name, mostly auto mapped -->
    <resultMap id="datasetResultMap" type="Dataset" autoMapping="true">
        <id property="key" column="key" />
        <result property="authorsAndEditors" column="authors_and_editors" typeHandler="org.col.db.type.StringArrayTypeHandler" />
        <result property="importFrequency" column="import_frequency" typeHandler="org.col.db.type.FrequencyTypeHandler" />
    </resultMap>

    <select id="count" resultType="integer">
        SELECT COUNT(*)
        FROM dataset
        WHERE <include refid="SEARCH_WHERE" />
    </select>

    <select id="search" resultMap="datasetResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE <include refid="SEARCH_WHERE" />
        ORDER BY
        <if test="req == null">key</if>
        <if test="req != null">
            <bind name="sortBy" value="req.sortBy.name()" />
            <choose>
                <when test="sortBy == 'RELEVANCE'">
                    ts_rank_cd(doc, plainto_tsquery('simple2', #{req.q})) DESC
                </when>
                <when test="sortBy == 'SIZE' || sortBy == 'CREATED' || sortBy == 'MODIFIED'">
                    ${req.sortBy.name().toLowerCase()} DESC
                </when>
                <otherwise>
                    ${req.sortBy.name().toLowerCase()}
                </otherwise>
            </choose>
        </if>
        <include refid="org.col.db.mapper.Common.limit"/>
    </select>

    <select id="list" resultMap="datasetResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE deleted IS NULL
        ORDER BY key
        <include refid="org.col.db.mapper.Common.limit"/>
    </select>

    <select id="listNeverImported" resultMap="datasetResultMap">
        SELECT <include refid="SELECT" />
        FROM dataset d
          LEFT JOIN dataset_import di ON di.dataset_key=d.key
        WHERE d.deleted IS NULL
          AND d.import_frequency >= 0
          AND di.attempt IS NULL
        ORDER BY d.key ASC
        LIMIT #{limit}
    </select>

    <select id="listToBeImported" resultMap="datasetResultMap">
        SELECT *
        FROM (
            SELECT DISTINCT ON (d.key) di.state, di.finished, <include refid="SELECT" />
            FROM dataset d
              LEFT JOIN dataset_import di ON di.dataset_key=d.key
            WHERE d.deleted IS NULL
                AND di.finished IS NOT NULL
                AND d.import_frequency > 0
        ORDER BY d.key, di.attempt DESC
        ) AS latest
        WHERE state != 0 AND (finished + import_frequency * interval '1 day') &lt;  now()
        ORDER BY finished ASC
        LIMIT #{limit}
    </select>

    <select id="exists" resultType="integer">
        SELECT key
        FROM dataset
        WHERE key = #{key} AND deleted IS NULL
    </select>

    <select id="get" resultMap="datasetResultMap">
      SELECT <include refid="SELECT" />
      FROM <include refid="FROM" />
      WHERE key = #{key}
    </select>

    <select id="getByGBIF" resultMap="datasetResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE gbif_key = #{key}
    </select>

    <insert id="create" parameterType="Dataset" useGeneratedKeys="true" keyProperty="key">
      INSERT INTO dataset (<include refid="COLS" />, created)
             VALUES (<include refid="PROPS" />, now())
    </insert>

    <update id="update" parameterType="Dataset">
        UPDATE dataset
        SET (<include refid="COLS" />) = (<include refid="PROPS" />)
        WHERE key = #{key}
    </update>

    <update id="updateLastImport" parameterType="integer">
        UPDATE dataset
        SET last_data_import_attempt = #{attempt}
        WHERE key = #{key}
    </update>

    <update id="delete" parameterType="map">
        UPDATE dataset SET deleted = now(), last_data_import_attempt=null
        WHERE key = #{key}
    </update>

</mapper>
