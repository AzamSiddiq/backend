<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.col.db.mapper.TreeMapper">

    <sql id="SELECT">
        t.dataset_key,
        t.sector_key,
        t.id,
        t.parent_id,
        t.provisional,
        t.species_estimate,
        t.species_estimate_reference_id,
        (select count(*) from taxon_${datasetKey} where parent_id=t.id) AS child_count,
        <include refid="org.col.db.mapper.NameMapper.minimalNameCols">
            <property name="alias" value="n"/>
            <property name="prefix" value=""/>
        </include>,
        <choose>
            <when test="datasetKey == 3">
                <include refid="org.col.db.mapper.SectorMapper.SELECT" />
            </when>
            <otherwise>
                NULL as key
            </otherwise>
        </choose>
    </sql>

    <sql id="FROM">
        taxon_${datasetKey} t JOIN name_${datasetKey} n ON t.name_id=n.id
        <if test="datasetKey == @org.col.api.vocab.Datasets@DRAFT_COL">
            LEFT JOIN sector s ON s.target_id=t.id
        </if>
    </sql>

    <resultMap id="treeResultMap" type="org.col.api.model.TreeNode$TreeNodeMybatis" autoMapping="true">
        <id property="id" column="id" />
        <result property="status" column="provisional" typeHandler="org.col.db.type2.TaxonStatusTypeHandler" />
        <association property="_name" javaType="Name" resultMap="org.col.db.mapper.NameMapper.nameResultMap" />
        <collection property="sectors" ofType="Sector" resultMap="org.col.db.mapper.SectorMapper.sectorResultMap" notNullColumn="key" />
    </resultMap>

    <select id="root" resultMap="treeResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE t.parent_id IS NULL
        ORDER BY n.rank, n.scientific_name
        <include refid="org.col.db.mapper.Common.limit" />
    </select>

    <select id="children" resultMap="treeResultMap">
        SELECT <include refid="SELECT" />
        FROM <include refid="FROM" />
        WHERE t.parent_id = #{id}
        ORDER BY n.rank, n.scientific_name
        <include refid="org.col.db.mapper.Common.limit" />
    </select>

    <select id="parents" resultMap="treeResultMap">
        WITH RECURSIVE x AS(
            SELECT <include refid="SELECT" />
            FROM <include refid="FROM" />
            WHERE t.id = #{id}
        UNION
            SELECT <include refid="SELECT" />
            FROM <include refid="FROM" />, x
            WHERE t.id = x.parent_id
        )
        SELECT *
        FROM x
     </select>

</mapper>
