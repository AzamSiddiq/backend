<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.col.db.mapper.NameActMapper">

  <sql id="SELECT">
    na.key,
    na.dataset_key,
    na.type,
    na.status,
    na.name_key,
    na.related_name_key,
    na.description,
    na.reference_key,
    na.reference_page
  </sql>

  <sql id="COLS">
    dataset_key,
    type,
    status,
    name_key,
    related_name_key,
    description,
    reference_key,
    reference_page
  </sql>

  <sql id="PROPS">
    #{datasetKey},
    #{type},
    #{status},
    #{nameKey},
    #{relatedNameKey},
    #{description},
    #{referenceKey},
    #{referencePage}
  </sql>

  <sql id="FROM">
    name_act na
  </sql>

  <resultMap id="nameActResultMap" type="NameAct" autoMapping="true">
    <id property="key" column="key" />
  </resultMap>

  <select id="listByName" parameterType="map" resultMap="nameActResultMap">
    SELECT
    <include refid="SELECT" />
    FROM name_act na
    LEFT JOIN name n ON (na.name_key = n.key)
    WHERE na.dataset_key = #{datasetKey}
    AND n.id = #{nameId}
    ORDER BY na.key
  </select>

  <!-- Get all name acts associated with the basionym of the provided name id and all names referencing that basionym -->
  <select id="listByHomotypicGroup" parameterType="map" resultMap="nameActResultMap">
    SELECT
    <include refid="SELECT" />
    FROM name_act as na
    JOIN name as name ON (na.name_key = name.key)
    WHERE na.dataset_key = #{datasetKey}
    AND (
      <!-- Get name corresponding to #{nameId} -->
      name.id = #{nameId}
      <!-- Get basionym of name corresponding to #{nameId} (if name is not itself a basionym) -->
      OR name.key in (SELECT basionym_key FROM name where id = #{nameId})
      <!-- Get siblings of name (if name is not itself a basionym) -->
      OR name.key in (
        SELECT sibling.key FROM name as sibling
        JOIN name as given ON (given.basionym_key = sibling.basionym_key)
        WHERE given.id = #{nameId}
      )
      <!-- Get children of name (if name is a basionym) -->
      OR name.key in (
        SELECT child.key FROM name as child
        JOIN name as given ON (given.key = child.basionym_key)
        WHERE given.id = #{nameId}
      )
    )
  </select>

  <select id="getByKey" resultMap="nameActResultMap">
    SELECT
    <include refid="SELECT" />
    FROM
    <include refid="FROM" />
    WHERE na.key = #{key}
  </select>

  <insert id="create" parameterType="NameAct" useGeneratedKeys="true" keyProperty="key">
    INSERT INTO name_act (
    <include refid="COLS" />
    )
    VALUES (
    <include refid="PROPS" />
    )
  </insert>

</mapper>
