/*
 * Copyright 2020 Global Biodiversity Information Facility (GBIF)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package life.catalogue.doi.service;


import life.catalogue.api.exception.NotFoundException;
import life.catalogue.api.model.DOI;
import life.catalogue.doi.datacite.model.DoiAttributes;

import java.net.URI;

import javax.validation.constraints.NotNull;

public interface DoiService {

  /**
   * Resolves the registered identifier.
   *
   * @param doi the identifier to resolve
   */
  @NotNull
  DoiAttributes resolve(DOI doi) throws NotFoundException, DoiException;

  /**
   * Creates a new draft DOI without any metadata.
   * A draft DOI is created which is not known to resolvers yet and can still be fully deleted.
   * If the given DOI has no suffix it will be autogenerated by DataCite.
   *
   * @throws DoiExistsException if the DOI existed already regardless of its state
   * @throws DoiException if the operation failed for any other reason
   */
  void create(DOI doi) throws DoiException;

  /**
   * Tries to delete an identifier. If it is still a draft DOI it will be fully deleted.
   * If it was published already it will be hidden instead.
   * Make sure to also update the DOIs url location to an appropriate tombstone page in that case.
   *
   * @param doi the identifier to delete
   * @return true if the DOI was fully deleted, false if it was only hidden
   * @throws DoiException if the operation failed for any reason
   */
  boolean delete(DOI doi) throws DoiException;

  /**
   * Updates the identifier metadata attributes. This method must be called every time the object or metadata
   * referenced by the identifier changes (e.g. a dataset gets republished, a dataset is replaced by
   * a new major version, etc).
   *
   * @throws DoiException if the operation failed for any reason
   */
  void update(DoiAttributes doi) throws DoiException;

  /**
   * Updates the registered identifier's target URL only.
   *
   * @param doi the identifier of metadata to update
   * @param target the new URL the DOI should resolve to
   * @throws DoiException if the operation failed for any reason
   */
  void update(DOI doi, URI target) throws DoiException;
}
