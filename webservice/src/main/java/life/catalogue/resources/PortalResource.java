package life.catalogue.resources;

import life.catalogue.dw.auth.Roles;

import java.io.IOException;

import javax.annotation.security.RolesAllowed;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import io.swagger.v3.oas.annotations.Hidden;
import life.catalogue.portal.PortalPageRenderer;
import life.catalogue.portal.PortalPageRenderer.Environment;

/**
 * Dynamic data pages for the portal, served by templates generated by the portal Jekyll project.
 * The templates can be updated via the API to serve the latest pages when the portal project is build.
 */
@Path("/portal/{env}")
@Hidden
@SuppressWarnings("static-method")
@Consumes(MediaType.TEXT_HTML)
@Produces(MediaType.TEXT_HTML)
public class PortalResource {
  private final PortalPageRenderer renderer;

  public PortalResource(PortalPageRenderer renderer) {
    this.renderer = renderer;
  }

  @PUT
  @Path("dataset")
  @RolesAllowed({Roles.ADMIN})
  public void setDatasource(@PathParam("env") Environment env, String template) throws IOException {
    renderer.store(env, PortalPageRenderer.PortalPage.DATASET, template);
  }

  @GET
  @Path("dataset/{id}")
  public Response datasource(@PathParam("env") Environment env, @PathParam("id") int id, @QueryParam("preview") boolean preview) throws Exception {
    return renderer.renderDatasource(id, env);
  }

  @PUT
  @Path("taxon")
  @RolesAllowed({Roles.ADMIN})
  public void setTaxon(@PathParam("env") Environment env, String template) throws IOException {
    renderer.store(env, PortalPageRenderer.PortalPage.TAXON, template);
  }

  @GET
  @Path("taxon/{id}")
  public Response taxon(@PathParam("env") Environment env, @PathParam("id") String id, @QueryParam("preview") boolean preview) throws Exception {
    return renderer.renderTaxon(id, env);
  }

  @PUT
  @Path("404")
  @RolesAllowed({Roles.ADMIN})
  public void setNotFound(@PathParam("env") Environment env, String template) throws IOException {
    renderer.store(env, PortalPageRenderer.PortalPage.NOT_FOUND, template);
  }
}
